<div class="x-py-[32px]">
  <div class="x-text-center x-flex x-flex-col x-gap-[48px] md:x-flex-row x-justify-center lg:x-gap-[80px]">
    <div class="x-flex x-flex-col x-gap-[16px]">
      <div class="x-text-[54px] x-leading-[48px]">
        <span class="count" data-target="14">0</span>
      </div>
      <div class="x-text-[24px]">Full Product Categories</div>
    </div>
    <div class="x-flex x-flex-col x-gap-[16px]">
      <div class="x-text-[54px] x-leading-[48px]">
        <span class="count" data-target="3000">0</span>+
      </div>
      <div class="x-text-[24px]">Premium Quality Products</div>
    </div>
    <div class="x-flex x-flex-col x-gap-[16px]">
      <div class="x-text-[54px] x-leading-[48px]">
        <span class="count" data-target="100">0</span>%
      </div>
      <div class="x-text-[24px]">High-Value Pricing Model</div>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const counters = document.querySelectorAll(".count");

    const animateCounters = (entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const counter = entry.target;
          const target = +counter.getAttribute("data-target");
          let count = 0;
          const duration = 4000; // Animation duration in milliseconds
          const startTime = performance.now();

          const updateCount = (currentTime) => {
            const elapsedTime = currentTime - startTime;
            const progress = Math.min(elapsedTime / duration, 1); // Progress from 0 to 1
            const easeOutValue = target * (1 - Math.pow(1 - progress, 3)); // Ease-out effect

            counter.innerText = Math.ceil(easeOutValue);

            if (progress < 1) {
              requestAnimationFrame(updateCount);
            } else {
              counter.innerText = target; // Ensure the final value is accurate
            }
          };

          requestAnimationFrame(updateCount);
          observer.unobserve(counter);
        }
      });
    };

    const observer = new IntersectionObserver(animateCounters, {
      threshold: 0.5, // Start animation when 50% visible
    });

    counters.forEach(counter => observer.observe(counter));
  });
</script>