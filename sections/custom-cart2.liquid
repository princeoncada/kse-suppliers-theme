{% comment %} 
APPENDIX:
L21: Start of cart section 
L54: Save for later cart section
L93: X button for cart section

appendSavedForLater() Houses everything below.
Quantity cart section
X button (clear cart) for cart section
Start of saved for later section
Quantity saved for later section
Add to cart saved for later
X button for saved for later
{% endcomment %}

<div class="x-max-w-[1000px] x-mx-auto">
    <div class="x-text-[24px] md:x-text-[40px] x-text-black">Cart</div>
    <div class="x-flex x-justify-end x-mb-4">
    <div class="clear-cart x-cursor-pointer x-font-semibold">Clear Cart</div>
    </div>
    <div class="x-bg-gray-100 x-max-w-[1254px] x-border">
        <div class="c-section x-w-[1000px] x-mx-auto x-p-4 x-px-[12px] x-pt-[20px] md:x-pt-[48px] md:x-pb-[48px] md:x-px-[48px]">
            {% assign unique_products = "" %}
            <!-- Gather Unique Product Titles in Cart -->
            {% for item in cart.items %}
                {% unless unique_products contains item.product.title %}
                    {% assign unique_products = unique_products | append: item.product.title | append: "," %}
                {% endunless %}
            {% endfor %}
        
            <!-- Loop Through Each Unique Product Title -->
            {% assign unique_products_array = unique_products | split: "," %}
            {% for product_title in unique_products_array %}
                {% unless product_title == "" %}
                    {% assign unique_types = "" %}
                    {% for item in cart.items %}
                        {% if item.product.title == product_title %}
                            {% unless unique_types contains item.variant.metafields.custom.type %}
                                {% assign unique_types = unique_types | append: item.variant.metafields.custom.type | append: "," %}
                            {% endunless %}
                        {% endif %}
                    {% endfor %}
        
                    {% assign unique_types_array = unique_types | split: "," %}
                    {% for type in unique_types_array %}
                        {% unless type == "" %}
                            <div class="product-group cart-product-group x-mb-4" data-product-title="{{ product_title }}" data-product-type="{{ type }}">
                                <div class="x-flex x-justify-between x-items-center x-mb-2">
                                    {% if type == "Default" %}
                                        <h2 class="x-text-[16px] x-font-semibold x-text-red-700">{{ product_title }}</h2>
                                    {% else %}
                                        <h2 class="x-text-[16px] x-font-semibold x-text-red-700">{{ type }}</h2>
                                    {% endif %}
                                    <div class="x-flex x-items-center">
                                        <span class="x-text-red-700 x-underline x-cursor-pointer save-for-later x-mr-4" data-product-title="{{ product_title }}" data-product-type="{{ type }}">
                                            Save for Later
                                        </span>
                                        <button class="x-text-black x-text-sm x-font-semibold remove-item">X</button>
                                    </div>
                                </div>
        
                                <table class="cart-section x-w-full x-text-left x-border-collapse x-mb-4 x-table-fixed">
                                    <thead>
                                        <tr class="x-bg-[#404042]">
                                            <th class="x-py-2 x-px-4 x-font-normal x-text-white x-w-[100px]">Item Code</th>
                                            <th class="x-py-2 x-px-4 x-font-normal x-text-white x-w-[100px]">Description</th>
                                            <th class="x-py-2 x-px-4 x-font-normal x-text-white x-w-[100px]">Cut Size</th>
                                            <th class="x-py-2 x-px-4 x-font-normal x-text-white x-w-[100px]">Packing</th>
                                            <th class="x-py-2 x-px-4 x-font-normal x-text-white x-w-[100px]">Color</th>
                                            <th class="x-py-2 x-px-4 x-font-normal x-text-white x-w-[100px]">Qty</th>
                                            <th class="x-py-2 x-px-4 x-font-normal x-text-white x-w-[100px]">Subtotal</th>
                                            <th class="x-py-2 x-px-4 x-font-normal x-text-white x-w-[10px]">&nbsp;</th>

                                        </tr>
                                    </thead>
                                    <tbody>
                                        {% for item in cart.items %}
                                            {% if item.product.title == product_title and item.variant.metafields.custom.type == type %}
                                                <tr class="x-border-t even:x-bg-white odd:x-bg-gray-100 x-border-gray-300" data-variant-id="{{ item.variant.id }}" data-line-item-id="{{ item.key }}">
                                                    <td class="x-py-2 x-px-4">{{ item.sku }}</td>
                                                    <td class="x-py-2 x-px-4">{{ item.variant.metafields.custom.description }}</td>
                                                    <td class="x-py-2 x-px-4">{{ item.variant.metafields.custom.cut_size | default: 'N/A' }}</td>
                                                    <td class="x-py-2 x-px-4">{{ item.variant.metafields.custom.packing | default: 'N/A' }}</td>
                                                    <td class="x-py-2 x-px-4">{{ item.variant.metafields.custom.color | default: 'N/A' }}</td>
                                                    <td class="x-py-2 x-px-4">
                                                        <div class="x-flex">
                                                            <button type="button" class="decrement x-border x-border-gray-300 x-rounded x-px-2 x-bg-white" data-line-item-id="{{ item.key }}">-</button>
                                                            <input type="number" value="{{ item.quantity }}" class="qty-input x-w-16 x-text-center x-border x-border-gray-300 x-rounded" readonly>
                                                            <button type="button" class="increment x-border x-border-gray-300 x-rounded x-px-2 x-bg-white" data-line-item-id="{{ item.key }}">+</button>
                                                        </div>
                                                    </td>
                                                    <td class="subtotal x-font-bold x-py-2 x-px-4">{{ item.line_price | money }}</td>
                                                    <td>
                                                        <button class="x-bg-gray-300 x-border x-font-semibold remove-row-item">X</button>
                                                    </td>
                                                </tr>
                                            {% endif %}
                                        {% endfor %}
                                    </tbody>
                                </table>
                            </div>
                        {% endunless %}
                    {% endfor %}
                {% endunless %}
            {% endfor %}
        
            <!-- Total Section -->
            <div class="x-flex x-justify-between x-items-center x-bg-red-100 x-border-2 x-border-red-600 x-p-4 x-font-bold x-text-red-600 x-mt-4 x-px-[24px]">
                <div class="x-uppercase x-font-bold">Total</div>
                <div class="x-text-[18px] x-font-bold cart-total">{{ cart.total_price | money }}</div>
            </div>

        </div>
    </div>
    <div class="x-text-[24px] x-font-semibold x-mt-[24px]">Saved for Later</div>
    <div id="saved-for-later" class="x-border x-px-[24px] x-mt-[12px]">
        <div id="saved-items-container" class="x-bg-white x-py-4"></div>
    </div>
</div>
<script>
$(document).ready(function () {
    function updateSavedForLaterStorage(productTitle, productType, itemCode, newQty) {
        const savedItems = JSON.parse(localStorage.getItem('savedForLater')) || [];
        const group = savedItems.find(group => group.productTitle === productTitle && group.productType === productType);

        if (group) {
            const item = group.items.find(item => item.itemCode === itemCode);
            if (item) {
                const unitPrice = parseFloat(item.subtotal.replace('$', '')) / parseInt(item.quantity);
                item.quantity = newQty;
                item.subtotal = `$${(unitPrice * newQty).toFixed(2)}`; // Correct subtotal calculation
            }
        }

        localStorage.setItem('savedForLater', JSON.stringify(savedItems));
    }

    $(document).on('click', '.increment-saved, .decrement-saved', function () {
        const row = $(this).closest('tr');
        const productTitle = $(this).data('product-title');
        const productType = $(this).data('product-type');
        const itemCode = $(this).data('item-code');
        const input = row.find('.qty-input-saved');
        let currentQty = parseInt(input.val());

        if ($(this).hasClass('increment-saved')) {
            currentQty += 1;
        } else if ($(this).hasClass('decrement-saved') && currentQty > 1) {
            currentQty -= 1;
        }

        input.val(currentQty);
        updateSavedForLaterStorage(productTitle, productType, itemCode, currentQty);

        // Re-render only the updated row
        const savedItems = JSON.parse(localStorage.getItem('savedForLater')) || [];
        const group = savedItems.find(group => group.productTitle === productTitle && group.productType === productType);
        const item = group.items.find(item => item.itemCode === itemCode);

        // Update subtotal in the same row
        row.find('.subtotal').text(item.subtotal);
    });

    function updateCart(key, quantity, row) {
                $.ajax({
                    url: '/cart/change.js',
                    method: 'POST',
                    dataType: 'json',
                    data: {
                        id: key,
                        quantity: quantity
                    },
                    success: function (cart) {
                        // Update the row subtotal
                        const updatedItem = cart.items.find(item => item.key === key);
                        if (updatedItem) {
                            row.find('.subtotal').text(`$${(updatedItem.line_price / 100).toFixed(2)}`);
                        }

                        // Update the cart total
                        $('.cart-total').text(`$${(cart.total_price / 100).toFixed(2)}`);
                    },
                    error: function (error) {
                        console.error('Error updating cart:', error);
                    }
                });
    }

    $(document).on('click', '.increment', function () {
        const row = $(this).closest('tr');
        const key = $(this).data('line-item-id');
        const input = row.find('.qty-input');
        let currentQty = parseInt(input.val());

        currentQty += 1;
        input.val(currentQty);

        updateCart(key, currentQty, row);
    });

    $(document).on('click', '.decrement', function () {
        const row = $(this).closest('tr');
        const key = $(this).data('line-item-id');
        const input = row.find('.qty-input');
        let currentQty = parseInt(input.val());

        if (currentQty > 1) {
            currentQty -= 1;
            input.val(currentQty);

            updateCart(key, currentQty, row);
        }
    });

    function loadSavedForLater() {
        console.log('Loading Saved Items');
        const savedItems = JSON.parse(localStorage.getItem('savedForLater')) || [];
        const savedItemsContainer = $('#saved-items-container');

        savedItemsContainer.empty(); // Ensure no duplicate elements

        savedItems.forEach(group => {
            appendSavedForLater(group); // Render each group properly
        });

        console.log('UI Updated for Saved Items');
    }

    function updateCartTotal() {
        $.ajax({
            url: '/cart.js',
            type: 'GET',
            dataType: 'json',
            success: function (cart) {
                $('.cart-total').text(`$${(cart.total_price / 100).toFixed(2)}`);
            },
            error: function (xhr, status, error) {
                console.error('Failed to fetch cart total', xhr.responseText || error);
            }
        });
    }

    function removeItemsFromCart(productTitle, productType) {
        const productGroup = $(`.cart-product-group[data-product-title="${productTitle}"][data-product-type="${productType}"]`);
        const rows = productGroup.find('tbody tr');

        if (rows.length === 0) {
            console.error('No items found for removal in the specified product group.');
            return;
        }

        function removeItemSequentially(index) {
            if (index >= rows.length) {
                productGroup.remove();
                updateCartTotal();
                return;
            }

            const row = $(rows[index]);
            const lineItemId = row.find('.increment').data('line-item-id');

            if (lineItemId) {
                $.ajax({
                    url: '/cart/change.js',
                    type: 'POST',
                    dataType: 'json',
                    data: { id: lineItemId, quantity: 0 },
                    success: function () {
                        removeItemSequentially(index + 1);
                    },
                    error: function () {
                        removeItemSequentially(index + 1);
                    }
                });
            } else {
                removeItemSequentially(index + 1);
            }
        }

        removeItemSequentially(0);
    }

    function appendSavedForLater(productGroup) {
        const { productTitle, productType, items } = productGroup;

        const existingGroup = $(`#saved-items-container .product-group[data-product-title="${productTitle}"][data-product-type="${productType}"]`);

        if (existingGroup.length > 0) {
            const tbody = existingGroup.find('tbody');
            items.forEach(item => {
                const existingRow = tbody.find(`tr:contains(${item.itemCode})`);
                if (existingRow.length > 0) {
                    const currentQty = parseInt(existingRow.find('.qty-input-saved').val());
                    const newQty = currentQty + parseInt(item.quantity);
                    existingRow.find('.qty-input-saved').val(newQty);
                    existingRow.find('.subtotal').text(`$${(parseFloat(item.subtotal.replace('$', '')) / currentQty * newQty).toFixed(2)}`);
                } else {
                    tbody.append(`
                        <tr data-item-code="${item.itemCode}">
                            <td>${item.itemCode}</td>
                            <td>${item.description}</td>
                            <td>${item.cutSize}</td>
                            <td>${item.packing}</td>
                            <td>
                                <div class="x-flex">
                                    <button type="button" class="decrement-saved x-border x-border-gray-300 x-rounded x-px-2 x-bg-white" data-item-code="${item.itemCode}" data-product-title="${productTitle}" data-product-type="${productType}">-</button>
                                    <input type="number" value="${item.quantity}" class="qty-input-saved x-w-16 x-text-center x-border x-border-gray-300 x-rounded" readonly>
                                    <button type="button" class="increment-saved x-border x-border-gray-300 x-rounded x-px-2 x-bg-white" data-item-code="${item.itemCode}" data-product-title="${productTitle}" data-product-type="${productType}">+</button>
                                </div>
                            </td>
                            <td class="subtotal">${item.subtotal}</td>
                        </tr>
                    `);
                }
            });
        } else {
            const savedSection = `
                <div class="product-group saved-for-later-product-group x-mb-4" data-product-title="${productTitle}" data-product-type="${productType}">
                    <div class="x-flex x-justify-between x-items-center x-mb-2">
                        <h2 class="x-text-[16px] x-font-semibold x-text-red-700">${productType === "Default" ? productTitle : productType}</h2>
                        <button class="x-text-black x-text-sm x-font-semibold remove-saved-item">X</button>
                    </div>
                    <table class="cart-section x-w-full x-text-left x-border-collapse x-mb-4 x-table-fixed">
                        <thead>
                            <tr class="x-bg-[#404042]">
                                <th class="x-py-2 x-px-4 x-font-normal x-text-white x-w-[100px]">Item Code</th>
                                <th class="x-py-2 x-px-4 x-font-normal x-text-white x-w-[100px]">Description</th>
                                <th class="x-py-2 x-px-4 x-font-normal x-text-white x-w-[100px]">Cut Size</th>
                                <th class="x-py-2 x-px-4 x-font-normal x-text-white x-w-[100px]">Packing</th>
                                <th class="x-py-2 x-px-4 x-font-normal x-text-white x-w-[100px]">Qty</th>
                                <th class="x-py-2 x-px-4 x-font-normal x-text-white x-w-[100px]">Price</th>
                                <th class="x-py-2 x-px-4 x-font-normal x-text-white x-w-[100px]"></th>
                            </tr>
                        </thead>
                        <tbody>
                            ${items.map(item => `
                                <tr data-item-code="${item.itemCode}">
                                    <td>${item.itemCode}</td>
                                    <td>${item.description}</td>
                                    <td>${item.cutSize}</td>
                                    <td>${item.packing}</td>
                                    <td>
                                        <div class="x-flex">
                                            <button type="button" class="decrement-saved x-border x-border-gray-300 x-rounded x-px-2 x-bg-white" data-item-code="${item.itemCode}" data-product-title="${productTitle}" data-product-type="${productType}">-</button>
                                            <input type="number" value="${item.quantity}" class="qty-input-saved x-w-16 x-text-center x-border x-border-gray-300 x-rounded" readonly>
                                            <button type="button" class="increment-saved x-border x-border-gray-300 x-rounded x-px-2 x-bg-white" data-item-code="${item.itemCode}" data-product-title="${productTitle}" data-product-type="${productType}">+</button>
                                        </div>
                                    </td>
                                    <td class="subtotal">${item.subtotal.includes('$') ? item.subtotal : `$${item.subtotal}`}</td>
                                    <td>
                                    <button class="x-bg-red-600 x-text-white x-font-semibold x-rounded x-px-4 x-py-2 add-to-cart" data-variant-id="${item.variantId}"  data-item-code="{{ item.itemCode }}">Add to Cart</button>
                                    <button class="x-bg-gray-300 x-border x-font-semibold remove-saved-item-row">X</button>
                                    </td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                </div>
            `;
            $('#saved-items-container').append(savedSection);
        }
    }

    $(document).on('click', '.add-to-cart', function () {
        const row = $(this).closest('tr');
        const variantId = $(this).data('variant-id'); 
        const quantity = parseInt(row.find('.qty-input-saved').val());
        const productTitle = row.closest('.product-group').data('product-title');
        const productType = row.closest('.product-group').data('product-type');
        const itemCode = row.data('item-code');

        if (!variantId || quantity <= 0) {
            alert('Invalid item or quantity.');
            return;
        }

        // Add item to cart
        $.ajax({
            url: '/cart/add.js',
            method: 'POST',
            dataType: 'json',
            data: JSON.stringify({
                items: [{ id: variantId, quantity: quantity }]
            }),
            contentType: 'application/json',
            success: function () {
            
                // Update the cart table
                refreshCartSection(); 

                // Remove item from local storage and UI
                let savedItems = JSON.parse(localStorage.getItem('savedForLater')) || [];
                const groupIndex = savedItems.findIndex(group => group.productTitle === productTitle && group.productType === productType);

                if (groupIndex > -1) {
                    let group = savedItems[groupIndex];
                    group.items = group.items.filter(item => item.itemCode !== itemCode);

                    if (group.items.length === 0) {
                        savedItems.splice(groupIndex, 1);
                        row.closest('.product-group').remove(); // Remove empty saved-for-later group
                    } else {
                        savedItems[groupIndex] = group;
                    }

                    localStorage.setItem('savedForLater', JSON.stringify(savedItems));
                }

                row.remove(); // Remove the individual row
                loadSavedForLater();
            },
            error: function (error) {
                console.error('Error adding to cart:', error);
                alert('Failed to add item to cart.');
            }
        });
    });

    function refreshCartSection() {
        $.ajax({
            url: '/cart', // Ensure this endpoint renders the cart HTML correctly
            method: 'GET',
            success: function (html) {
                // Replace the existing cart-section content
                const newCartSection = $(html).find('.c-section').html();
                $('.c-section').html(newCartSection);
                loadSavedForLater();
            },
            error: function (error) {
                console.error('Failed to refresh cart section:', error);
            }
        });
    }

    $(document).on('click', '.clear-cart', function () {
        $.ajax({
            url: '/cart/clear.js', // Shopify endpoint to clear the cart
            method: 'POST',
            dataType: 'json',
            success: function () {
                refreshCartSection(); 
            },
            error: function (error) {
                console.error('Error clearing cart:', error);
                alert('Failed to clear the cart. Please try again.');
            }
        });
    });

    $(document).on('click', '.save-for-later', function () {
            const productTitle = $(this).data('product-title');
            const productType = $(this).data('product-type');
            const variantId = $(this).closest('tr').data('variant-id');
            const productGroup = $(`.cart-product-group[data-product-title="${productTitle}"][data-product-type="${productType}"]`);
            const table = productGroup.find('table.cart-section');
            if (table.length === 0) {
                console.error('No table found for saving items later.');
                return;
            }

            const items = [];
            table.find('tbody tr').each(function () {
                const row = $(this);
                items.push({
                    itemCode: row.find('td:nth-child(1)').text().trim(),
                    description: row.find('td:nth-child(2)').text().trim(),
                    cutSize: row.find('td:nth-child(3)').text().trim(),
                    packing: row.find('td:nth-child(4)').text().trim(),
                    quantity: parseInt(row.find('.qty-input').val()?.trim() || '1'),
                    subtotal: parseFloat(row.find('.subtotal').text()?.replace('$', '').trim() || '0').toFixed(2),
                    variantId: row.data('variant-id')
                });
            });
            const totalQuantity = items.reduce((sum, item) => sum + item.quantity, 0);
            console.log('Total Quantity:', totalQuantity);
            let savedItems = JSON.parse(localStorage.getItem('savedForLater')) || [];
            const existingGroupIndex = savedItems.findIndex(group => group.productTitle === productTitle && group.productType === productType);

            if (existingGroupIndex > -1) {
                // Update existing group
                const existingGroup = savedItems[existingGroupIndex];
                items.forEach(newItem => {
                    const existingItem = existingGroup.items.find(item => item.itemCode === newItem.itemCode);
                    if (existingItem) {
                        existingItem.quantity += newItem.quantity;
                        existingItem.subtotal = `$${(parseFloat(existingItem.subtotal.replace('$', '')) + parseFloat(newItem.subtotal)).toFixed(2)}`;
                        
                    } else {
                        existingGroup.items.push(newItem);
                    }
                });
                savedItems[existingGroupIndex] = existingGroup;
                
            } else {
                // Add new group
                savedItems.push({ productTitle, productType, items });
            }

            localStorage.setItem('savedForLater', JSON.stringify(savedItems));
            console.log('Saved Items:', savedItems);
            loadSavedForLater();
            removeItemsFromCart(productTitle, productType);
            console.log('ui:', totalQuantity);
        });

        $(document).on('click', '.remove-saved-item', function () {
            const productGroup = $(this).closest('.product-group');
            const productTitle = productGroup.data('product-title');
            const productType = productGroup.data('product-type');

            let savedItems = JSON.parse(localStorage.getItem('savedForLater')) || [];
            savedItems = savedItems.filter(group => group.productTitle !== productTitle || group.productType !== productType);
            localStorage.setItem('savedForLater', JSON.stringify(savedItems));

            productGroup.remove();
        });

        $(document).on('click', '.remove-item', function () {
            const productGroup = $(this).closest('.cart-product-group');
            const productTitle = productGroup.data('product-title');
            const productType = productGroup.data('product-type');

            removeItemsFromCart(productTitle, productType);
        });

        $(document).on('click', '.remove-saved-item-row', function () {
            const row = $(this).closest('tr');
            const productTitle = row.closest('.product-group').data('product-title');
            const productType = row.closest('.product-group').data('product-type');
            const itemCode = row.data('item-code');
            console.log('Removing item:', itemCode);

            let savedItems = JSON.parse(localStorage.getItem('savedForLater')) || [];
            const groupIndex = savedItems.findIndex(group => group.productTitle === productTitle && group.productType === productType);

            if (groupIndex > -1) {
                // Find the group and update its items
                const group = savedItems[groupIndex];
                group.items = group.items.filter(item => item.itemCode !== itemCode);

                if (group.items.length === 0) {
                    // Remove the group entirely if no items are left
                    savedItems.splice(groupIndex, 1);
                } else {
                    // Update the group in the savedItems array
                    savedItems[groupIndex] = group;
                }

                // Update localStorage
                localStorage.setItem('savedForLater', JSON.stringify(savedItems));
            }

            row.remove(); // Remove the row from UI
        });

        $(document).on('click', '.remove-row-item', function () {
            const row = $(this).closest('tr');
            const lineItemId = row.data('line-item-id');

            if (!lineItemId) {
                console.error('No line item ID found for removal.');
                return;
            }

            // Remove item from cart using Shopify API
            $.ajax({
                url: '/cart/change.js',
                method: 'POST',
                dataType: 'json',
                data: { id: lineItemId, quantity: 0 },
                success: function (cart) {
                    refreshCartSection(); // Refresh cart display
                },
                error: function (error) {
                    console.error('Error removing item:', error);
                    alert('Failed to remove item from cart.');
                }
            });
        });

        loadSavedForLater();
    });
</script>
