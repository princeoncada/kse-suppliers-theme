<section>
    <div class="x-p-[16px] md:x-px-[30px] lg:x-p-[40px] lg:x-py-[64px] lg:x-max-w-[1440px] lg:x-mx-auto">
        <div class="x-flex x-flex-col x-gap-[64px] x-mb-[8px] md:x-mb-[16px]">
            <a class="x-flex x-items-center x-gap-[4px] x-text-[#9E0B0F]">
                <i class='bx bx-left-arrow-alt x-text-[20px]' ></i> <div class="x-leading-[0px] x-underline x-underline-offset-[4px] x-decoration-[#9E0B0F]">Continue Shopping</div>
                </a>
            <div class="x-text-[32px] md:x-text-[64px] x-leading-[36px] x-mb-[-32]">CART</div>
            <div class="x-w-full x-flex x-justify-end x-items-end">
                <button class="md:x-text-[20px]">Clear Cart</button>
            </div>
        </div>
    
        <div class="x-border x-bg-[#F9F9F8] x-p-[16px] md:x-p-[48px] md:x-px-[72px] x-flex x-flex-col x-gap-[24px] md:x-gap-[40px]">
            <div class="x-space-y-[18px] md:x-space-y-[40px]">
                <div class="items-container x-space-y-[16px] md:x-space-y-[40px]">
                    {% assign unique_products = "" %}
                    {% for item in cart.items %}
                        {% unless unique_products contains item.product.title %}
                            {% assign unique_products = unique_products | append: item.product.title | append: "," %}
                        {% endunless %}
                    {% endfor %}
                    
                    {% assign unique_products_array = unique_products | split: "," %}
                    {% for product_title in unique_products_array %}
                        {% unless product_title == "" %}
                            {% assign unique_types = "" %}
                            {% for item in cart.items %}
                                {% if item.product.title == product_title %}
                                    {% unless unique_types contains item.variant.metafields.custom.type %}
                                        {% assign unique_types = unique_types | append: item.variant.metafields.custom.type | append: "," %}
                                    {% endunless %}
                                {% endif %}
                            {% endfor %}
                            
                            {% assign unique_types_array = unique_types | split: "," %}
                            {% for type in unique_types_array %}
                                {% unless type == "" %}
                                    <div class="item">
                                        <div class="product-group cart-product-group x-text-[#9E0B0F] x-pb-[4px] md:x-pb-[12px] x-border-b-[1px] md:x-border-none x-border-gray-300 x-flex x-items-end x-justify-between x-py-[4px] x-pr-[4px]" data-product-title="{{ product_title }}" data-product-type="{{ type }}">
                                            <div class="x-text-[18px] md:x-text-[24px] lg:x-text-[32px] md:x-leading-[32px]">
                                                {% if type == "Default" or type == "default" %}
                                                    {{ product_title }}
                                                {% else %}
                                                    {{ type }}
                                                {% endif %}
                                            </div>
                                            <div class="x-flex x-items-end">
                                                <div class="x-flex x-items-center x-gap-[8px]">
                                                    <button class="save-for-later x-underline x-underline-offset-[2px] lg:x-text-[20px]" data-product-title="{{ product_title }}" data-product-type="{{ type }}">Save for Later</button>
                                                    <button class="x-rounded-md x-text-[#444446] x-text-[18px] x-flex x-items-center x-p-[4px]">
                                                        <i class='bx bx-x x-leading-[0px]' ></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    
                        {% comment %} mobile view {% endcomment %}
                        <div class="x-flex x-flex-col md:x-hidden">
                            <div class="x-border-b-[1px] x-border-gray-300 x-py-[8px] x-space-y-[16px]">
                                <div class="x-grid x-grid-cols-2 x-gap-[8px] x-gap-x-[12px]">
                                    {% for item in cart.items %}
                                        {% if item.product.title == product_title and item.variant.metafields.custom.type == type %}
                                    <div>
                                        <span>Item Code: </span><span>{{ item.sku }}</span>
                                    </div>
                                    <div>
                                        <span>Desc: </span><span>{{ item.variant.metafields.custom.description }}</span>
                                    </div>
                                    <div>
                                        <span>Cut Size: </span><span>{{ item.variant.metafields.custom.cut_size }}</span>
                                    </div>
                                    <div>
                                        <span>Packing: </span><span>{{ item.variant.metafields.custom.packing }}</span>
                                    </div>
                                    <div>
                                        <span>Color: </span><span>{{ item.variant.metafields.custom.color }}</span>
                                    </div>
                                    <div>&nbsp;</div>
                                    <div class="x-flex x-gap-[4px] x-items-center x-w-full">
                                        <span>Qty:</span>
                                        <div class="x-flex x-items-center x-border x-rounded-md">
                                            <button class="x-flex x-items-center x-p-[4px] x-border-r-[1px] x-border-gray-200"><i class='x-text-[16px] bx bx-minus' ></i></button>
                                            <input type="number" class="x-border-none x-outline-none x-shadow-none x-text-center x-w-[40px]" readonly value="{{ item.quantity }}">
                                            <button class="x-flex x-items-center x-p-[4px] x-border-l-[1px] x-border-gray-200"><i class='x-text-[16px] bx bx-plus'></i></button>
                                        </div>
                                    </div>
                                    
                                    <div class="x-flex x-items-center">
                                        <span>Subtotal:&nbsp;</span><span class="x-font-semibold">{{ item.line_price | money }}</span>
                                    </div>
                                {% endif %}
                            {% endfor %}
                                </div>
                                <div>
                                    <button class="x-w-full x-text-[#444446] x-bg-[#DFDFDF] x-rounded-md x-py-[4px]"><i class='bx bxs-trash-alt' ></i></button>
                                </div>
                            </div>
                        </div>

                        {% comment %} desktop view {% endcomment %}
                        <div class="x-hidden x-flex-col md:x-flex">
                            <table class="cart-section x-border-none table-alternating-rows">
                                <thead>
                                    <tr class="x-text-white x-bg-[#404042]">
                                        <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Item Code</th>
                                        <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Desc</th>
                                        <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Cut Size</th>
                                        <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Packing</th>
                                        <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Color</th>
                                        <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Qty</th>
                                        <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Subtotal</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {% for item in cart.items %}
                                        {% if item.product.title == product_title and item.variant.metafields.custom.type == type %}
                                    <tr class="x-border-b-[2.5px] x-border-[#e0e0e0]" data-variant-id="{{ item.variant.id }}" data-line-item-id="{{ item.key }}">
                                        <td class="x-p-[8px] x-py-[16px]">{{ item.sku }}</td>
                                        <td class="x-p-[8px] x-py-[16px]">{{ item.variant.metafields.custom.description }}</td>
                                        <td class="x-p-[8px] x-py-[16px]">{{ item.variant.metafields.custom.cut_size }}</td>
                                        <td class="x-p-[8px] x-py-[16px]">{{ item.variant.metafields.custom.packing }}</td>
                                        <td class="x-p-[8px] x-py-[16px]">{{ item.variant.metafields.custom.color }}</td>
                                        <td class="x-p-[8px] x-py-[4px]">
                                            <div class="x-flex x-gap-[4px] x-items-center md:x-w-full lg:x-pr-[48px]">
                                                <div class="x-flex x-items-center x-border x-rounded-md">
                                                    <button class="x-flex x-items-center x-p-[8px] x-border-r-[1px] x-border-gray-200 x-bg-white x-rounded-l-md" data-line-item-id="{{ item.key }}"><i class='x-text-[16px] bx bx-minus' ></i></button>
                                                    <input type="number" class="qty-input x-border-none x-outline-none x-shadow-none x-text-center x-w-full x-py-[4px]" readonly value="{{ item.quantity }}">
                                                    <button class="x-flex x-items-center x-p-[8px] x-border-l-[1px] x-border-gray-200 x-bg-white x-rounded-r-md" data-line-item-id="{{ item.key }}"><i class='x-text-[16px] bx bx-plus'></i></button>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="x-p-[8px] x-py-[12px] x-pr-[4px]">
                                            <div class="x-flex x-justify-between">
                                                <div class="subtotal">{{ item.line_price | money }}</div>
                                                <button class="x-rounded-sm x-text-[#444446] x-bg-[#DFDFDF] x-text-[18px] x-flex x-items-center x-p-[4px] x-px-[3px]">
                                                    <i class='remove-row-item bx bx-x x-leading-[0px]' ></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                    {% endif %}
                                {% endfor %}
                                </tbody>
                            </table>
                        </div>
                    </div>
                {% endunless %}
            {% endfor %}
        {% endunless %}
    {% endfor %}

                </div>
                <div class="x-w-full x-flex x-border-[#9E0B0F] x-border-[1px] x-justify-between x-p-[8px] md:x-p-[16px] x-bg-[#F5DFE2] x-text-[#9E0B0F]">
                    <div class="x-text-[16px] md:x-text-[22px]">TOTAL</div>
                    <div class="cart-total x-font-semibold md:x-text-[18px] x-flex x-items-center">{{ cart.total_price | money }}</div>
                </div>
            </div>

            <div class="x-space-y-[8px]">
                <div class="x-text-[18px] md:x-text-[22px]">Looking to get a quote?</div>
                <div class="md:x-text-[16px]">You will have the opportunity to submit your order for a shipping quote and make any special requests on the checkout page.</div>
            </div>
            <div class="x-flex x-flex-col md:x-flex-row md:x-justify-between x-gap-[24px]">
                <div class="x-flex x-gap-[10px] x-items-center">
                    <div class="x-bg-orange-700 x-w-[48px] md:x-w-[64px] x-aspect-square x-rounded-full">&nbsp;</div>
                    <div class="x-text-[16px]">
                        <div class="x-text-[12px] md:x-text-[16px]">Contact & Support</div>
                        <div class="x-flex x-gap-[8px] md:x-text-[20px]">
                            <div class="x-font-semibold">999.999.9999</div>
                            <div class="x-flex x-items-center x-gap-[4px] x-text-[#9E0B0F]"><i class='bx bxs-chat' ></i> Chat</div>
                        </div>
                    </div>
                </div>
                <div class="x-w-full md:x-w-1/2 lg:x-w-1/3 x-flex x-gap-[8px] md:x-text-[20px]">
                    <button class="x-p-[8px] x-flex-1 x-text-[#9E0B0F] x-underline x-underline-offset-[2px]">Save Order as Draft</button>
                    <button class="x-border-[#9E0B0F] x-p-[8px] x-flex-1 x-rounded-md x-bg-[#9E0B0F] x-text-white">Checkout</button>
                </div>
            </div>
        </div>

        <div class="save-for-later-section">
            <div class="x-text-[20px] x-underline x-underline-offset-[8px] x-my-[16px] x-mt-[64px]">Saved for Later</div>
            <div class="x-border x-p-[16px] md:x-p-[48px] md:x-px-[72px]">
                <div class="items-container x-space-y-[16px]">
                    <div class="item">
                        <div class="x-text-[#9E0B0F] x-pb-[4px] md:x-pb-[12px] x-border-b-[1px] md:x-border-none x-border-gray-300 x-flex x-items-end x-justify-between x-py-[4px] x-pr-[4px]">
                            <div class="title x-text-[18px] md:x-text-[24px] lg:x-text-[32px] md:x-leading-[32px]"></div>
                            <div class="x-flex x-items-end">
                                <button class="x-rounded-md x-text-[#444446] x-text-[18px] x-flex x-items-center x-p-[4px] remove-item">
                                    <i class='bx bx-x'></i>
                                </button>
                            </div>
                        </div>

                        <div class="x-flex x-flex-col md:x-hidden">
                            <div class="x-border-b-[1px] x-border-gray-300 x-py-[8px] x-space-y-[16px]">
                                <div class="x-grid x-grid-cols-2 x-gap-[8px] x-gap-x-[12px]">
                                    <div class="item-code">
                                        <span>Item Code: </span><span></span>
                                    </div>
                                    <div class="desc">
                                        <span>Desc: </span><span></span>
                                    </div>
                                    <div class="cut-size">
                                        <span>Cut Size: </span><span></span>
                                    </div>
                                    <div class="packing">
                                        <span>Packing: </span><span></span>
                                    </div>
                                    <div class="color">
                                        <span>Color: </span><span></span>
                                    </div>
                                    <div class="quantity x-flex x-gap-[4px] x-items-center x-w-full">
                                        <span>Qty:</span>
                                        <div class="x-flex x-items-center x-border x-rounded-md">
                                            <button class="x-flex x-items-center x-p-[4px] x-border-r-[1px] x-border-gray-200 decrement">
                                                <i class='x-text-[16px] bx bx-minus'></i>
                                            </button>
                                            <input type="number" class="qty-input x-border-none x-outline-none x-shadow-none x-text-center x-w-[40px]" readonly value="1">
                                            <button class="x-flex x-items-center x-p-[4px] x-border-l-[1px] x-border-gray-200 increment">
                                                <i class='x-text-[16px] bx bx-plus'></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="subtotal">
                                        <span>Subtotal:&nbsp;</span><span class="x-font-semibold"></span>
                                    </div>
                                </div>
                                <div class="x-flex x-justify-end">
                                    <button class="add-to-cart x-text-white x-bg-[#9E0B0F] x-rounded-md x-py-[8px]">Add to Cart</button>
                                </div>
                            </div>
                        </div>

                        <div class="desktop-view x-hidden x-flex-col md:x-flex">
                            <table class="x-border-none table-alternating-rows">
                                <thead>
                                    <tr class="x-text-white x-bg-[#404042]">
                                        <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Item Code</th>
                                        <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Desc</th>
                                        <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Cut Size</th>
                                        <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Packing</th>
                                        <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Color</th>
                                        <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Qty</th>
                                        <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Subtotal</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr class="x-border-b-[2.5px] x-border-[#e0e0e0]">
                                        <td class="x-p-[8px] x-py-[16px] item-code">
                                        </td>
                                        <td class="x-p-[8px] x-py-[16px] item-desc">
                                        </td>
                                        <td class="x-p-[8px] x-py-[16px] item-cut-size">
                                        </td>
                                        <td class="x-p-[8px] x-py-[16px] item-packing">
                                        </td>
                                        <td class="x-p-[8px] x-py-[16px] item-color">
                                        </td>
                                        <td class="x-p-[8px] x-py-[4px]">
                                            <div class="x-flex x-gap-[4px] x-items-center md:x-w-full lg:x-pr-[48px]">
                                                <div class="x-flex x-items-center x-border x-rounded-md">
                                                    <button class="x-flex x-items-center x-p-[8px] x-border-r-[1px] x-border-gray-200 x-bg-white x-rounded-l-md decrement">
                                                        <i class='x-text-[16px] bx bx-minus'></i>
                                                    </button>
                                                    <input type="number" class="qty-input x-border-none x-outline-none x-shadow-none x-text-center x-w-full x-py-[4px]" readonly value="&nbsp;">
                                                    <button class="x-flex x-items-center x-p-[8px] x-border-l-[1px] x-border-gray-200 x-bg-white x-rounded-r-md increment">
                                                        <i class='x-text-[16px] bx bx-plus'></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="x-p-[8px] x-py-[12px] x-pr-[4px] item-subtotal">
                                            <div class="x-flex x-justify-between x-items-center x-gap-[16px]">
                                                <div class="x-pr-[32px]">&nbsp;</div>
                                                <button class="x-bg-[#9E0A10] x-text-white x-p-[8px] x-px-[16px] x-text-nowrap x-rounded-md add-to-cart">
                                                    Add to Cart
                                                </button>
                                                <button class="x-rounded-sm x-text-[#444446] x-bg-[#DFDFDF] x-text-[18px] x-flex x-items-center x-py-[4px] x-px-[3px] remove-item">
                                                    <i class='bx bx-x'></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
</section>

<style>
    .table-alternating-rows tbody tr:nth-child(even) {
        background-color: white;
    }
</style>

<script>
$(document).ready(function () {

    function loadSavedForLater() {
        const savedItems = JSON.parse(localStorage.getItem('savedForLater')) || [];
        const savedSection = $(".save-for-later-section");
        const itemsContainer = savedSection.find(".items-container");

        itemsContainer.empty(); // Clear any existing items

        if (savedItems.length === 0) {
            savedSection.addClass("x-hidden"); // Hide the section if no items
            return;
        }

        savedItems.forEach(group => {
            // Ensure the group has valid items before processing
            const validGroupItems = group.items.filter(item => {
                // Validate that the item has meaningful data
                return item.itemCode && item.itemCode.trim() !== "" &&
                    item.description && item.description.trim() !== "" &&
                    item.quantity > 0;
            });

            if (validGroupItems.length === 0) return; // Skip if no valid items in the group

            // Create a header for the product group
            const groupHeader = `
                <div class="x-flex x-items-center x-justify-between x-text-[#9E0B0F] x-border-b-[1px] x-border-gray-300 x-py-[4px] md:x-py-[12px]">
                    <div class="title x-text-[18px] md:x-text-[24px] lg:x-text-[32px] md:x-leading-[32px]">
                        ${group.productType === "Default" ? group.productTitle : group.productType}
                    </div>
                    <button class="x-rounded-md x-text-[#444446] x-text-[18px] x-flex x-items-center x-p-[4px] remove-group" data-product-title="${group.productTitle}" data-product-type="${group.productType}">
                        <i class='bx bx-x'></i>
                    </button>
                </div>
            `;


            // Mobile view container
            const mobileContainer = $("<div>").addClass("x-flex x-flex-col md:x-hidden");

            validGroupItems.forEach(item => {
                const mobileRow = `
                    <div class="x-border-b-[1px] x-border-gray-300 x-py-[8px]">
                        <div class="x-grid x-grid-cols-2 x-gap-[8px] x-gap-x-[12px]">
                            <div><span>Item Code: </span><span>${item.itemCode || "N/A"}</span></div>
                            <div><span>Desc: </span><span>${item.description || "N/A"}</span></div>
                            <div><span>Cut Size: </span><span>${item.cutSize || "N/A"}</span></div>
                            <div><span>Packing: </span><span>${item.packing || "N/A"}</span></div>
                            <div><span>Color: </span><span>${item.color || "N/A"}</span></div>
                            <div class="x-flex x-gap-[4px] x-items-center x-w-full">
                                <span>Qty:</span>
                                <div class="x-flex x-items-center x-border x-rounded-md">
                                    <button class="x-flex x-items-center x-p-[4px] x-border-r-[1px] x-border-gray-200 decrement">
                                        <i class='x-text-[16px] bx bx-minus'></i>
                                    </button>
                                    <input type="number" class="qty-input x-border-none x-outline-none x-shadow-none x-text-center x-w-[40px]" readonly value="${item.quantity || 1}">
                                    <button class="x-flex x-items-center x-p-[4px] x-border-l-[1px] x-border-gray-200 increment">
                                        <i class='x-text-[16px] bx bx-plus'></i>
                                    </button>
                                </div>
                            </div>
                            <div class="subtotal">
                                <span>Subtotal:&nbsp;</span><span class="x-font-semibold">$${item.subtotal || "0.00"}</span>
                            </div>
                        </div>
                        <div class="x-flex x-justify-end">
                            <button class="add-to-cart x-text-white x-bg-[#9E0B0F] x-rounded-md x-py-[8px]" data-item-code="${item.itemCode}" data-variant-id="${item.variantId}">
                                Add to Cart
                            </button>
                        </div>
                    </div>
                `;
                mobileContainer.append(mobileRow);
            });

            // Desktop view container
            const desktopContainer = $(`
                <div class="desktop-view x-hidden x-flex-col md:x-flex">
                    <table class="x-border-none table-alternating-rows">
                        <thead>
                            <tr class="x-text-white x-bg-[#404042]">
                                <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Item Code</th>
                                <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Desc</th>
                                <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Cut Size</th>
                                <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Packing</th>
                                <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Color</th>
                                <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Qty</th>
                                <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Subtotal</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            `);

            const desktopTableBody = desktopContainer.find("tbody");

            validGroupItems.forEach(item => {
                const desktopRow = `
                    <tr class="x-border-b-[2.5px] x-border-[#e0e0e0]">
                        <td class="x-p-[8px] x-py-[16px] item-code">${item.itemCode || "N/A"}</td>
                        <td class="x-p-[8px] x-py-[16px] item-desc">${item.description || "N/A"}</td>
                        <td class="x-p-[8px] x-py-[16px] item-cut-size">${item.cutSize || "N/A"}</td>
                        <td class="x-p-[8px] x-py-[16px] item-packing">${item.packing || "N/A"}</td>
                        <td class="x-p-[8px] x-py-[16px] item-color">${item.color || "N/A"}</td>
                        <td class="x-p-[8px] x-py-[4px]">
                            <div class="x-flex x-gap-[4px] x-items-center md:x-w-full lg:x-pr-[48px]">
                                <div class="x-flex x-items-center x-border x-rounded-md">
                                    <button class="x-flex x-items-center x-p-[8px] x-border-r-[1px] x-border-gray-200 x-bg-white x-rounded-l-md decrement">
                                        <i class='x-text-[16px] bx bx-minus'></i>
                                    </button>
                                    <input type="number" class="qty-input x-border-none x-outline-none x-shadow-none x-text-center x-w-full x-py-[4px]" readonly value="${item.quantity || 1}">
                                    <button class="x-flex x-items-center x-p-[8px] x-border-l-[1px] x-border-gray-200 x-bg-white x-rounded-r-md increment">
                                        <i class='x-text-[16px] bx bx-plus'></i>
                                    </button>
                                </div>
                            </div>
                        </td>
                        <td class="x-p-[8px] x-py-[12px] x-pr-[4px] item-subtotal">
                            <div class="x-flex x-justify-between x-items-center x-gap-[16px]">
                                <div class="x-pr-[32px]">$${item.subtotal || "0.00"}</div>
                                <button class="x-bg-[#9E0A10] x-text-white x-p-[8px] x-px-[16px] x-text-nowrap x-rounded-md add-to-cart" data-item-code="${item.itemCode}" data-variant-id="${item.variantId}">
                                    Add to Cart
                                </button>
                                <button class="x-rounded-sm x-text-[#444446] x-bg-[#DFDFDF] x-text-[18px] x-flex x-items-center x-py-[4px] x-px-[3px] remove-item">
                                    <i class='bx bx-x'></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
                desktopTableBody.append(desktopRow);
            });

            // Append the header, mobile container, and desktop container to the items container
            itemsContainer.append(groupHeader).append(mobileContainer).append(desktopContainer);
        });

        savedSection.removeClass("x-hidden"); // Show the section if items exist
    }
    
    function updateCartTotal() {
        $.ajax({
            url: '/cart.js',
            type: 'GET',
            dataType: 'json',
            success: function (cart) {
                $('.cart-total').text(`$${(cart.total_price / 100).toFixed(2)}`);
            },
            error: function (xhr, status, error) {
                console.error('Failed to fetch cart total', xhr.responseText || error);
            }
        });
    }

    function removeItemsFromCart(productTitle, productType) {
        const productGroup = $(`.cart-product-group[data-product-title="${productTitle}"][data-product-type="${productType}"]`);
        if (productGroup.length === 0) {
            console.error('No matching product group found.');
            return;
        }

        // Find all rows in the table within the product group
        const table = productGroup.nextAll('div').find('table.cart-section');
        const rows = table.find('tbody tr');
        if (rows.length === 0) {
            console.error('No items found for removal in the specified product group.');
            return;
        }

        console.log('Rows to Remove:', rows);

        // Function to remove items sequentially
        function removeItemSequentially(index) {
            if (index >= rows.length) {
                console.log('All items removed from the cart.');
                rows.remove(); // Ensure rows are removed
                if (table.find('tbody tr').length === 0) {
                    // Remove the header row if the table is empty
                    table.closest('.item').remove();
                    console.log('Header removed along with empty table.');
                }
                updateCartTotal(); // Refresh cart total
                return;
            }

            const row = $(rows[index]);
            const lineItemId = row.data('line-item-id');

            if (lineItemId) {
                // Shopify API call to remove the item from the cart
                $.ajax({
                    url: '/cart/change.js',
                    type: 'POST',
                    dataType: 'json',
                    data: { id: lineItemId, quantity: 0 },
                    success: function () {
                        console.log(`Removed item with lineItemId: ${lineItemId}`);
                        removeItemSequentially(index + 1); // Proceed to the next item
                    },
                    error: function (error) {
                        console.error(`Failed to remove item with lineItemId: ${lineItemId}`, error);
                        removeItemSequentially(index + 1); // Proceed even if an error occurs
                    }
                });
            } else {
                console.error('No line item ID found for this row.');
                removeItemSequentially(index + 1); // Proceed to the next row
            }
        }

        removeItemSequentially(0); // Start removing items from the cart
    }

    $(document).on('click', '.save-for-later', function () {
        const productTitle = $(this).data('product-title');
        const productType = $(this).data('product-type');

        console.log('Product Title:', productTitle);
        console.log('Product Type:', productType);

        // Locate the product group
        const productGroup = $(`.cart-product-group[data-product-title="${productTitle}"][data-product-type="${productType}"]`);
        console.log('Product Group:', productGroup);

        if (productGroup.length === 0) {
            console.error('No matching product group found.');
            return;
        }

        // Adjusted table lookup: Check sibling containers if necessary
        const table = productGroup.nextAll('div').find('table.cart-section');
        console.log('Table Found:', table);

        if (table.length === 0) {
            console.error('No table found for saving items later.');
            return;
        }

        // Collect items from the table
        const items = [];
        table.find('tbody tr').each(function () {
            const row = $(this);
            items.push({
                itemCode: row.find('td:nth-child(1)').text().trim(),
                description: row.find('td:nth-child(2)').text().trim(),
                cutSize: row.find('td:nth-child(3)').text().trim(),
                packing: row.find('td:nth-child(4)').text().trim(),
                color: row.find('td:nth-child(5)').text().trim(),
                quantity: parseInt(row.find('.qty-input').val()?.trim() || '1', 10),
                subtotal: parseFloat(row.find('.subtotal').text()?.replace('$', '').trim() || '0'), // Remove dollar sign and convert to float
                variantId: row.data('variant-id'),
            });
        });

        console.log('Collected Items:', items);

        if (items.length === 0) {
            console.error('No valid items found in the table.');
            return;
        }

        // Manage saved items in localStorage
        let savedItems = JSON.parse(localStorage.getItem('savedForLater')) || [];
        const existingGroupIndex = savedItems.findIndex(
            (group) => group.productTitle === productTitle && group.productType === productType
        );

        if (existingGroupIndex > -1) {
            // Update the existing group
            const existingGroup = savedItems[existingGroupIndex];
            items.forEach((newItem) => {
                const existingItem = existingGroup.items.find((item) => item.itemCode === newItem.itemCode);
                if (existingItem) {
                    // Update quantity and subtotal
                    existingItem.quantity += newItem.quantity;
                    existingItem.subtotal = (
                        parseFloat(existingItem.subtotal) + parseFloat(newItem.subtotal)
                    ).toFixed(2); // Perform addition and fix decimals
                } else {
                    // Add new item to the group
                    existingGroup.items.push(newItem);
                }
            });
            savedItems[existingGroupIndex] = existingGroup;
        } else {
            // Add new group to saved items
            savedItems.push({ productTitle, productType, items });
        }

        // Save updated items back to localStorage
        localStorage.setItem('savedForLater', JSON.stringify(savedItems));
        console.log('Saved Items:', savedItems);

        // Update the UI
        loadSavedForLater();

        // Remove the items from the cart
        removeItemsFromCart(productTitle, productType);
    });

    

    // Load saved items on page load
    loadSavedForLater();
});
</script>

{% comment %} progress mine {% endcomment %}