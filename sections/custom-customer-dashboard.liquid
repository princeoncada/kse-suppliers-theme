<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
{{ 'tingle.css' | asset_url | stylesheet_tag }}
<script src="{{ 'tingle.js' | asset_url }}"></script>

<section>
    <div class="x-p-[16px] x-flex x-flex-col-reverse md:x-flex-row-reverse x-gap-[8px] md:x-gap-[20px] md:x-max-w-[1440px] md:x-mx-auto">
        <div class="x-bg-[#F9F9F8] x-p-[16px] md:x-w-full">
            <div class="dashboard view x-hidden">
                <div>
                    <div class="x-pb-[8px]">
                        Hello 
                        {% if customer %}
                            <span class="x-font-semibold">{{ customer.first_name }} {{ customer.last_name }}</span>
                            (not {{ customer.first_name }}? 
                            <a href="/account/logout" 
                               class="x-text-[#9E0B0F] x-underline x-underline-offset-[2px] x-font-semibold">Log out</a>)
                        {% endif %}
                    </div>
                    <div>
                        From your account dashboard you can view <a href="/account?view=orders"
                            class="x-text-[#9E0B0F] x-underline x-underline-offset-[2px] x-font-semibold">Recent
                            Orders</a>, manage your <a href="/account?view=addresses"
                            class="x-text-[#9E0B0F] x-underline x-underline-offset-[2px] x-font-semibold">Shipping
                            Address</a>, and edit your <a href="/account?view=account"
                            class="x-text-[#9E0B0F] x-underline x-underline-offset-[2px] x-font-semibold">Password and
                            Account details</a>
                    </div>
                </div>
            </div>            

            <div class="orders view x-hidden">
                <div class="main x-flex x-flex-col x-gap-[16px]">
                    <div class="x-flex x-justify-between md:x-justify-start md:x-gap-[24px]">
                        <button class="company-orders sub-view-button x-text-[16px] md:x-text-[20px]">Company Orders</button>
                        <button class="my-orders sub-view-button x-text-[16px] md:x-text-[20px]">My Orders</button>
                        {% comment %} <button class="recurring-orders sub-view-button x-text-[16px] md:x-text-[20px]">Recurring Orders</button> {% endcomment %}
                    </div>
                    <div>
                        <div class="company-orders sub-view x-hidden">
                            <div class="x-overflow-x-auto x-max-w-full">
                                <table class="x-w-full">
                                    <thead>
                                        <tr>
                                            <th class="x-sticky x-left-0 x-z-[1] x-p-0">
                                                <div class="x-bg-white x-p-3 x-border-b x-border-gray-300 x-text-nowrap shadow-right">Order #</div>
                                            </th>
                                            <th class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap">Ordered by</th>
                                            <th class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap">Status</th>
                                            <th class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap">PO</th>
                                            <th class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap">Total</th>
                                            <th class="x-sticky x-right-0 x-z-[1] x-p-0">
                                                <div class="x-bg-white x-p-3 x-border-b x-border-gray-300 x-text-nowrap shadow-left">Actions</div>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        
                                        <tr class="md:x-text-center">
                                            <td class="x-sticky x-left-0 x-bg-white x-p-0 x-border-b x-border-gray-300 x-text-center x-h-[10px]">
                                                <div class="x-h-full x-w-full x-flex x-items-center x-justify-center shadow-right">
                                                    20156
                                                </div>
                                            </td>
                                            <td class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap md:x-text-wrap">Company Orders</td>
                                            <td class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap md:x-text-wrap">Shipped</td>
                                            <td class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap md:x-text-wrap">258893</td>
                                            <td class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap md:x-text-wrap">$110.00 for 3 items</td>
                                            <td class="x-sticky x-right-0 x-bg-white x-p-0 x-border-b x-border-gray-300 x-h-[10px]">
                                                <div class="x-flex x-flex-col lg:x-flex-row x-gap-[8px] x-p-[8px] x-h-full x-w-full x-items-center x-justify-center shadow-left">
                                                    <button class="view-order-btn x-bg-red-800 x-text-white x-py-1 x-px-3 x-rounded x-w-full" data-order="20156">VIEW</button>
                                                </div>
                                            </td>
                                        </tr>

                                        <tr class="md:x-text-center">
                                            <td class="x-sticky x-left-0 x-bg-white x-p-0 x-border-b x-border-gray-300 x-text-center x-h-[10px]">
                                                <div class="x-h-full x-w-full x-flex x-items-center x-justify-center shadow-right">
                                                    20156
                                                </div>
                                            </td>
                                            <td class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap md:x-text-wrap">Company Orders</td>
                                            <td class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap md:x-text-wrap">Shipped</td>
                                            <td class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap md:x-text-wrap">258893</td>
                                            <td class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap md:x-text-wrap">$110.00 for 3 items</td>
                                            <td class="x-sticky x-right-0 x-bg-white x-p-0 x-border-b x-border-gray-300 x-h-[10px]">
                                                <div class="x-flex x-flex-col lg:x-flex-row x-gap-[8px] x-p-[8px] x-h-full x-w-full x-items-center x-justify-center shadow-left">
                                                    <button class="view-order-btn x-bg-red-800 x-text-white x-py-1 x-px-3 x-rounded x-w-full" data-order="20156">VIEW</button>
                                                </div>
                                            </td>
                                        </tr>
    
                                        <!-- Additional rows as needed -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div class="my-orders sub-view">
                            <div class="x-overflow-x-auto x-max-w-full">
                                <table class="x-w-full">
                                    <thead>
                                        <tr>
                                            <th class="x-sticky x-left-0 x-z-[1] x-p-0">
                                                <div class="x-bg-white x-p-3 x-border-b x-border-gray-300 x-text-nowrap shadow-right">Order #</div>
                                            </th>
                                            <th class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap">Ordered by</th>
                                            <th class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap">Status</th>
                                            <th class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap">PO</th>
                                            <th class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap">Total</th>
                                            <th class="x-sticky x-right-0 x-z-[1] x-p-0">
                                                <div class="x-bg-white x-p-3 x-border-b x-border-gray-300 x-text-nowrap shadow-left">Actions</div>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        
                                        <tr class="md:x-text-center">
                                            <td class="x-sticky x-left-0 x-bg-white x-p-0 x-border-b x-border-gray-300 x-text-center x-h-[10px]">
                                                <div class="x-h-full x-w-full x-flex x-items-center x-justify-center shadow-right">
                                                    20156
                                                </div>
                                            </td>
                                            <td class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap md:x-text-wrap">My Orders</td>
                                            <td class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap md:x-text-wrap">Cancelled</td>
                                            <td class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap md:x-text-wrap">258894</td>
                                            <td class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap md:x-text-wrap">$36.50 for 3 items</td>
                                            <td class="x-sticky x-right-0 x-bg-white x-p-0 x-border-b x-border-gray-300 x-h-[10px]">
                                                <div class="x-flex x-flex-col lg:x-flex-row x-gap-[8px] x-p-[8px] x-h-full x-w-full x-items-center x-justify-center shadow-left">
                                                    <button class="view-order-btn x-bg-red-800 x-text-white x-py-1 x-px-3 x-rounded x-w-full" data-order="20156">VIEW</button>
                                                </div>
                                            </td>
                                        </tr>
    
                                        <tr class="md:x-text-center">
                                            <td class="x-sticky x-left-0 x-bg-white x-p-0 x-border-b x-border-gray-300 x-text-center x-h-[10px]">
                                                <div class="x-h-full x-w-full x-flex x-items-center x-justify-center shadow-right">
                                                    20156
                                                </div>
                                            </td>
                                            <td class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap md:x-text-wrap">My Orders</td>
                                            <td class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap md:x-text-wrap">Cancelled</td>
                                            <td class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap md:x-text-wrap">258894</td>
                                            <td class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap md:x-text-wrap">$36.50 for 3 items</td>
                                            <td class="x-sticky x-right-0 x-bg-white x-p-0 x-border-b x-border-gray-300 x-h-[10px]">
                                                <div class="x-flex x-flex-col lg:x-flex-row x-gap-[8px] x-p-[8px] x-h-full x-w-full x-items-center x-justify-center shadow-left">
                                                    <button class="view-order-btn x-bg-red-800 x-text-white x-py-1 x-px-3 x-rounded x-w-full" data-order="20156">VIEW</button>
                                                </div>
                                            </td>
                                        </tr>
    
                                        <!-- Additional rows as needed -->
                                    </tbody>
                                </table>
                            </div>  
                        </div>

                        {% comment %} <div class="recurring-orders sub-view x-hidden">
                            <div class="x-overflow-x-auto x-max-w-full">
                                <table class="x-w-full">
                                    <thead>
                                        <tr>
                                            <th class="x-sticky x-left-0 x-z-[1] x-p-0">
                                                <div class="x-bg-white x-p-3 x-border-b x-border-gray-300 x-text-nowrap shadow-right">Order #</div>
                                            </th>
                                            <th class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap">Ordered by</th>
                                            <th class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap">Status</th>
                                            <th class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap">PO</th>
                                            <th class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap">Total</th>
                                            <th class="x-sticky x-right-0 x-z-[1] x-p-0">
                                                <div class="x-bg-white x-p-3 x-border-b x-border-gray-300 x-text-nowrap shadow-left">Actions</div>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        
                                        <tr class="md:x-text-center">
                                            <td class="x-sticky x-left-0 x-bg-white x-p-0 x-border-b x-border-gray-300 x-text-center x-h-[10px]">
                                                <div class="x-h-full x-w-full x-flex x-items-center x-justify-center shadow-right">
                                                    20156
                                                </div>
                                            </td>
                                            <td class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap md:x-text-wrap">Recurring Orders</td>
                                            <td class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap md:x-text-wrap">Shipped</td>
                                            <td class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap md:x-text-wrap">258893</td>
                                            <td class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap md:x-text-wrap">$110.00 for 3 items</td>
                                            <td class="x-sticky x-right-0 x-bg-white x-p-0 x-border-b x-border-gray-300 x-h-[10px]">
                                                <div class="x-flex x-flex-col lg:x-flex-row x-gap-[8px] x-p-[8px] x-h-full x-w-full x-items-center x-justify-center shadow-left">
                                                    <button class="x-bg-red-800 x-text-white x-py-1 x-px-3 x-rounded x-w-full">VIEW</button>
                                                    <button class="x-bg-yellow-500 x-text-white x-py-1 x-px-3 x-rounded x-w-full">REORDER</button>
                                                    <button class="x-bg-gray-500 x-text-white x-py-1 x-px-3 x-rounded x-w-full">TRACK</button>
                                                </div>
                                            </td>
                                        </tr>
    
                                        <tr class="md:x-text-center">
                                            <td class="x-sticky x-left-0 x-bg-white x-p-0 x-border-b x-border-gray-300 x-text-center x-h-[10px]">
                                                <div class="x-h-full x-w-full x-flex x-items-center x-justify-center shadow-right">
                                                    20156
                                                </div>
                                            </td>
                                            <td class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap md:x-text-wrap">Recurring Orders</td>
                                            <td class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap md:x-text-wrap">Shipped</td>
                                            <td class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap md:x-text-wrap">258893</td>
                                            <td class="x-p-3 x-border-b x-border-gray-300 x-text-nowrap md:x-text-wrap">$110.00 for 3 items</td>
                                            <td class="x-sticky x-right-0 x-bg-white x-p-0 x-border-b x-border-gray-300 x-h-[10px]">
                                                <div class="x-flex x-flex-col lg:x-flex-row x-gap-[8px] x-p-[8px] x-h-full x-w-full x-items-center x-justify-center shadow-left">
                                                    <button class="x-bg-red-800 x-text-white x-py-1 x-px-3 x-rounded x-w-full">VIEW</button>
                                                    <button class="x-bg-yellow-500 x-text-white x-py-1 x-px-3 x-rounded x-w-full">REORDER</button>
                                                    <button class="x-bg-gray-500 x-text-white x-py-1 x-px-3 x-rounded x-w-full">TRACK</button>
                                                </div>
                                            </td>
                                        </tr>
    
                                        <!-- Additional rows as needed -->
                                    </tbody>
                                </table>
                            </div>
                        </div> {% endcomment %}
                    </div>
                </div>
                <div class="order-view x-hidden">
                    <button class="order-back-btn x-underline x-text-[20px] x-underline-offset-4 x-mb-[16px]">Back</button>
                    <div class="x-flex x-justify-between x-items-center">
                        <div class="x-text-[32px] md:x-text-[40px]">Order #20165</div>
                        <div class="x-text-[16px] md:x-text-[20px]">PO: 258894</div>
                    </div>
                    <div class="x-flex x-flex-col md:x-flex-row x-justify-between x-gap-[16px] md:x-gap-[0px] md:x-items-center x-py-[12px] x-pb-[32px]">
                        <div class="x-text-[14px] md:x-text-[18px]">This order was placed on <span class="x-font-bold">October 25, 2023</span> by <span class="x-font-bold">Samuel Smith</span></div>
                        <div class="x-flex x-gap-[8px] x-items-end">
                            <button class="x-bg-[#F2AD36] x-text-white x-px-[12px] x-py-[6px] x-rounded-[4px] x-text-[14px] md:x-text-[18px]">Reorder</button>
                            <button class="x-bg-[#404042] x-text-white x-px-[12px] x-py-[6px] x-rounded-[4px] x-text-[14px] md:x-text-[18px]">Track</button>
                        </div>
                    </div>
                    <div class="items-container x-space-y-[16px] md:x-space-y-[40px]">

                        <div class="item">
                            <div class="x-text-[#9E0B0F] x-pb-[4px] md:x-pb-[12px] x-border-b-[1px] md:x-border-none x-border-gray-300 x-flex x-items-end x-justify-between x-py-[4px] x-pr-[4px]">
                                <div class="x-text-[18px] md:x-text-[24px] md:x-leading-[32px]">Fitted Sheets</div>
                            </div>

                            {% comment %} mobile view {% endcomment %}
                            <div class="x-flex x-flex-col md:x-hidden">
                                <div class="x-border-b-[1px] x-border-gray-300 x-py-[8px] x-space-y-[16px]">
                                    <div class="x-grid x-grid-cols-2 x-gap-[8px] x-gap-x-[12px]">
                                        <div>
                                            <span>Item Code: </span><span>SAP3680</span>
                                        </div>
                                        <div>
                                            <span>Desc: </span><span>Twin</span>
                                        </div>
                                        <div>
                                            <span>Cut Size: </span><span>36 X 80 X 9</span>
                                        </div>
                                        <div>
                                            <span>Packing: </span><span>5 Dz/Cs</span>
                                        </div>
                                        <div>
                                            <span>Color: </span><span>Beige</span>
                                        </div>
                                        <div>&nbsp;</div>
                                        <div class="x-flex x-gap-[4px] x-items-center x-w-full">
                                            <span>Qty:</span><span>3</span>
                                        </div>
                                        
                                        <div class="x-flex x-items-center">
                                            <span>Subtotal:&nbsp;</span><span class="x-font-semibold">$110.97</span>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            {% comment %} desktop view {% endcomment %}
                            <div class="x-hidden x-flex-col md:x-flex">
                                <table class="x-border-none table-alternating-rows">
                                    <thead>
                                        <tr class="x-text-white x-bg-[#404042]">
                                            <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Item Code</th>
                                            <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Description</th>
                                            <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Cut Size</th>
                                            <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Packing</th>
                                            <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Color</th>
                                            <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Qty</th>
                                            <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Subtotal</th>
                                        </tr>
                                    </thead>
                                    <tbody>

                                        <tr class="x-border-b-[2.5px] x-border-[#e0e0e0]">
                                            <td class="x-p-[8px] x-py-[16px]">SAP3680</td>
                                            <td class="x-p-[8px] x-py-[16px]">Twin</td>
                                            <td class="x-p-[8px] x-py-[16px]">36 X 80 X 9</td>
                                            <td class="x-p-[8px] x-py-[16px]">5 Dz/Cs</td>
                                            <td class="x-p-[8px] x-py-[16px]">Beige</td>
                                            <td class="x-p-[8px] x-py-[16px]">3</td>
                                            <td class="x-p-[8px] x-py-[12px] x-pr-[4px]">
                                                <div class="x-flex x-justify-between">
                                                    <div>$110.97</div>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr class="x-border-b-[2.5px] x-border-[#e0e0e0]">
                                            <td class="x-p-[8px] x-py-[16px]">SAP3680</td>
                                            <td class="x-p-[8px] x-py-[16px]">Twin</td>
                                            <td class="x-p-[8px] x-py-[16px]">36 X 80 X 9</td>
                                            <td class="x-p-[8px] x-py-[16px]">5 Dz/Cs</td>
                                            <td class="x-p-[8px] x-py-[16px]">Beige</td>
                                            <td class="x-p-[8px] x-py-[16px]">3</td>
                                            <td class="x-p-[8px] x-py-[12px] x-pr-[4px]">
                                                <div class="x-flex x-justify-between">
                                                    <div>$110.97</div>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr class="x-border-b-[2.5px] x-border-[#e0e0e0]">
                                            <td class="x-p-[8px] x-py-[16px]">SAP3680</td>
                                            <td class="x-p-[8px] x-py-[16px]">Twin</td>
                                            <td class="x-p-[8px] x-py-[16px]">36 X 80 X 9</td>
                                            <td class="x-p-[8px] x-py-[16px]">5 Dz/Cs</td>
                                            <td class="x-p-[8px] x-py-[16px]">Beige</td>
                                            <td class="x-p-[8px] x-py-[16px]">3</td>
                                            <td class="x-p-[8px] x-py-[12px] x-pr-[4px]">
                                                <div class="x-flex x-justify-between">
                                                    <div>$110.97</div>
                                                </div>
                                            </td>
                                        </tr>

                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <div class="item">
                            <div class="x-text-[#9E0B0F] x-pb-[4px] md:x-pb-[12px] x-border-b-[1px] md:x-border-none x-border-gray-300 x-flex x-items-end x-justify-between x-py-[4px] x-pr-[4px]">
                                <div class="x-text-[18px] md:x-text-[24px] md:x-leading-[32px]">Draw Sheets</div>
                            </div>

                            {% comment %} mobile view {% endcomment %}
                            <div class="x-flex x-flex-col md:x-hidden">
                                <div class="x-border-b-[1px] x-border-gray-300 x-py-[8px] x-space-y-[16px]">
                                    <div class="x-grid x-grid-cols-2 x-gap-[8px] x-gap-x-[12px]">
                                        <div>
                                            <span>Item Code: </span><span>SAP3680</span>
                                        </div>
                                        <div>
                                            <span>Desc: </span><span>Twin</span>
                                        </div>
                                        <div>
                                            <span>Cut Size: </span><span>36 X 80 X 9</span>
                                        </div>
                                        <div>
                                            <span>Packing: </span><span>5 Dz/Cs</span>
                                        </div>
                                        <div>
                                            <span>Color: </span><span>Beige</span>
                                        </div>
                                        <div>&nbsp;</div>
                                        <div class="x-flex x-gap-[4px] x-items-center x-w-full">
                                            <span>Qty:</span><span>3</span>
                                        </div>
                                        
                                        <div class="x-flex x-items-center">
                                            <span>Subtotal:&nbsp;</span><span class="x-font-semibold">$110.97</span>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            {% comment %} desktop view {% endcomment %}
                            <div class="x-hidden x-flex-col md:x-flex">
                                <table class="x-border-none table-alternating-rows">
                                    <thead>
                                        <tr class="x-text-white x-bg-[#404042]">
                                            <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Item Code</th>
                                            <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Description</th>
                                            <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Cut Size</th>
                                            <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Packing</th>
                                            <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Color</th>
                                            <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Qty</th>
                                            <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Subtotal</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr class="x-border-b-[2.5px] x-border-[#e0e0e0]">
                                            <td class="x-p-[8px] x-py-[16px]">SAP3680</td>
                                            <td class="x-p-[8px] x-py-[16px]">Twin</td>
                                            <td class="x-p-[8px] x-py-[16px]">36 X 80 X 9</td>
                                            <td class="x-p-[8px] x-py-[16px]">5 Dz/Cs</td>
                                            <td class="x-p-[8px] x-py-[16px]">Beige</td>
                                            <td class="x-p-[8px] x-py-[16px]">3</td>
                                            <td class="x-p-[8px] x-py-[12px] x-pr-[4px]">
                                                <div class="x-flex x-justify-between">
                                                    <div>$110.97</div>
                                                </div>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <div class="item">
                            <div class="x-text-[#9E0B0F] x-pb-[4px] md:x-pb-[12px] x-border-b-[1px] md:x-border-none x-border-gray-300 x-flex x-items-end x-justify-between x-py-[4px] x-pr-[4px]">
                                <div class="x-text-[18px] md:x-text-[24px] md:x-leading-[32px]">Pillowcase</div>
                            </div>

                            {% comment %} mobile view {% endcomment %}
                            <div class="x-flex x-flex-col md:x-hidden">
                                <div class="x-border-b-[1px] x-border-gray-300 x-py-[8px] x-space-y-[16px]">
                                    <div class="x-grid x-grid-cols-2 x-gap-[8px] x-gap-x-[12px]">
                                        <div>
                                            <span>Item Code: </span><span>SAP3680</span>
                                        </div>
                                        <div>
                                            <span>Desc: </span><span>Twin</span>
                                        </div>
                                        <div>
                                            <span>Cut Size: </span><span>36 X 80 X 9</span>
                                        </div>
                                        <div>
                                            <span>Packing: </span><span>5 Dz/Cs</span>
                                        </div>
                                        <div>
                                            <span>Color: </span><span>Beige</span>
                                        </div>
                                        <div>&nbsp;</div>
                                        <div class="x-flex x-gap-[4px] x-items-center x-w-full">
                                            <span>Qty:</span><span>3</span>
                                        </div>
                                        
                                        <div class="x-flex x-items-center">
                                            <span>Subtotal:&nbsp;</span><span class="x-font-semibold">$110.97</span>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            {% comment %} desktop view {% endcomment %}
                            <div class="x-hidden x-flex-col md:x-flex">
                                <table class="x-border-none table-alternating-rows">
                                    <thead>
                                        <tr class="x-text-white x-bg-[#404042]">
                                            <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Item Code</th>
                                            <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Description</th>
                                            <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Cut Size</th>
                                            <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Packing</th>
                                            <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Color</th>
                                            <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Qty</th>
                                            <th class="x-text-start x-p-[8px] x-py-[12px] x-font-normal x-w-[14.28%]">Subtotal</th>
                                        </tr>
                                    </thead>
                                    <tbody>

                                        <tr class="x-border-b-[2.5px] x-border-[#e0e0e0]">
                                            <td class="x-p-[8px] x-py-[16px]">SAP3680</td>
                                            <td class="x-p-[8px] x-py-[16px]">Twin</td>
                                            <td class="x-p-[8px] x-py-[16px]">36 X 80 X 9</td>
                                            <td class="x-p-[8px] x-py-[16px]">5 Dz/Cs</td>
                                            <td class="x-p-[8px] x-py-[16px]">Beige</td>
                                            <td class="x-p-[8px] x-py-[16px]">3</td>
                                            <td class="x-p-[8px] x-py-[12px] x-pr-[4px]">
                                                <div class="x-flex x-justify-between">
                                                    <div>$110.97</div>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr class="x-border-b-[2.5px] x-border-[#e0e0e0]">
                                            <td class="x-p-[8px] x-py-[16px]">SAP3680</td>
                                            <td class="x-p-[8px] x-py-[16px]">Twin</td>
                                            <td class="x-p-[8px] x-py-[16px]">36 X 80 X 9</td>
                                            <td class="x-p-[8px] x-py-[16px]">5 Dz/Cs</td>
                                            <td class="x-p-[8px] x-py-[16px]">Beige</td>
                                            <td class="x-p-[8px] x-py-[16px]">3</td>
                                            <td class="x-p-[8px] x-py-[12px] x-pr-[4px]">
                                                <div class="x-flex x-justify-between">
                                                    <div>$110.97</div>
                                                </div>
                                            </td>
                                        </tr>

                                    </tbody>
                                </table>
                            </div>
                        </div>
                        
                    </div>
                    <div class="x-flex x-w-full x-my-[32px] x-p-[16px] x-bg-[#F0EFEF]">
                        <div class="x-w-1/2">&nbsp;</div>
                        <div class="x-w-1/2 x-flex x-flex-col x-gap-[8px]">
                            <div class="x-flex x-justify-between">
                                <div class="x-text-[16px] md:x-text-[20px]">
                                    Subtotal:
                                </div> 
                                <div class="x-text-[16px] md:x-text-[20px]">
                                    $110.97
                                </div>
                            </div>
                            <div class="x-flex x-justify-between">
                                <div class="x-text-[16px] md:x-text-[20px]">
                                    Shipping:
                                </div> 
                                <div class="x-text-[16px] md:x-text-[20px]">
                                    $0.00
                                </div>
                            </div>
                            <div class="x-flex x-justify-between">
                                <div class="x-text-[16px] md:x-text-[20px]">
                                    Total:
                                </div> 
                                <div class="x-text-[16px] md:x-text-[20px] x-text-[#951728]">
                                    $110.97
                                </div>    
                            </div>    
                        </div>
                    </div>
                    <div class="x-flex">
                        <div class="x-w-1/2">
                            <h1 class="x-text-[#951728] x-text-[18px] md:x-text-[24px] x-mb-[16px]">Contact Info</h1>
                            <div class="x-flex x-flex-col x-gap-[16px]">
                                <div class="x-text-[14px] md:x-text-[16px]">
                                    <div class="x-text-[#BBBBBC]">First Name</div>
                                    <div>Sam</div>
                                </div>
                                <div class="x-text-[14px] md:x-text-[16px]">
                                    <div class="x-text-[#BBBBBC]">Last Name</div>
                                    <div>Smith</div>
                                </div>
                                <div class="x-text-[14px] md:x-text-[16px]">
                                    <div class="x-text-[#BBBBBC]">Email</div>
                                    <div>samsmith@email.com</div>                                
                                </div>   
                            </div>                  
                        </div>
                        <div class="x-w-1/2">
                            <h1 class="x-text-[#951728] x-text-[18px] md:x-text-[24px] x-mb-[16px]">Shipping Address</h1>
                            <div class="x-text-[14px] md:x-text-[16px]">
                                <div>Sam Smith</div>
                                <div>1234 Main St</div>
                                <div>Los Angeles, CA 90001</div>
                                <div>United States</div>
                            </div>
                        </div>
                    </div>
                    <div class="x-pt-[32px]">
                        <h1 class="x-text-[#951728] x-text-[18px] md:x-text-[24px] x-mb-[16px]">Notes</h1>
                        <div class="x-text-[14px] md:x-text-[16px]">
                            Lorem ipsum dolor sit amet consectetur, adipisicing elit. Et, fugit? Molestiae, ipsa. Reiciendis aliquid cum molestiae in officia voluptatem repellat earum ratione dolorum, magnam nostrum. Dolor reiciendis nisi in nulla.
                        </div>
                    </div>
                </div>
            </div>

            <div class="addresses view x-hidden x-h-full">
                <div class="x-flex x-flex-col x-gap-[16px] x-h-full">
                    <div>The following addresses will be used on the checkout page by default</div>
                    <div class="x-flex x-flex-col x-gap-[16px] x-flex-1">
                        <div class="x-text-[16px] md:x-text-[20px]">Shipping Address</div>
                        <div class="x-grid x-grid-cols-1 md:x-grid-cols-2 x-gap-[16px]" id="shipping-addresses">
                            <!-- Addresses will be dynamically inserted here -->
                        </div>
                        <div class="x-flex x-items-center x-gap-[4px] x-text-[#9e0b0f] x-mt-[8px]" id="add-new-address">
                            <i class='bx bx-plus'></i><div>Add New Address</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="account view x-hidden">
                <div class="x-space-y-[24px]">
                    <div class="x-space-y-[8px]">
                        <div class="x-grid x-grid-cols-1 md:x-grid-cols-2 x-gap-[8px]">
                            <div class="x-flex x-flex-col x-gap-[4px]">
                                <label for="first_name" class="x-text-[14]">First Name</label>
                                <input type="text" id="first_name" name="first_name" value="Sam" class="x-border x-p-[8px] x-rounded-md x-text-[14px]">
                            </div>
                            <div class="x-flex x-flex-col x-gap-[4px]">
                                <label for="last_name" class="x-text-[14]">Last Name</label>
                                <input type="text" id="last_name" name="last_name" value="Smith" class="x-border x-p-[8px] x-rounded-md x-text-[14px]">
                            </div>
                        </div>
                        <div class="x-flex x-flex-col x-gap-[4px]">
                            <div class="x-flex x-flex-col x-gap-[4px]">
                                <label for="display_name" class="x-text-[14]">Display Name</label>
                                <input type="text" value="Sam Smith" name="display_name" class="x-border x-p-[8px]">
                            </div>
                            <div class="x-italic x-text-[14px] x-text-gray-400 x-mt-[4px]">
                                This is how your name will be displayed in the account section and reviews
                            </div>
                        </div>
                    </div>
                    <div class="x-space-y-[12px]">
                        <div class="x-text-[18px]">
                            Password Change
                        </div>
                        <div class="x-space-y-[8px]">
                            <div class="x-flex x-flex-col x-gap-[4px]">
                                <label for="current_password" class="x-text-[14]">Current Password</label>
                                <input type="password" name="current_password" value="qwerty12345" class="x-border x-p-[8px] x-rounded-md x-text-[14px]">
                            </div>
                            <div class="x-flex x-flex-col x-gap-[4px]">
                                <label for="new_password" class="x-text-[14]">New Password</label>
                                <input type="password" name="new_password" value="" class="x-border x-p-[8px] x-rounded-md x-text-[14px]">
                            </div>
                            <div class="x-flex x-flex-col x-gap-[4px]">
                                <label for="confirm_password" class="x-text-[14]">Confirm Password</label>
                                <input type="password" name="confirm_password" value="" class="x-border x-p-[8px] x-rounded-md x-text-[14px]">
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="saved view x-hidden">
                <div class="saved-orders-list">
                </div>
            </div>

            <div class="drafts view x-hidden">
                <div class="draft-orders-list">
                </div>
            </div>
        </div>

        <div class="x-flex x-flex-row md:x-flex-col x-gap-[8px] md:x-w-[420px] md:x-gap-[12px] md:x-min-h-[480px] md:x-max-h-[480px]">
            <button
                class="dashboard nav-button x-flex-1 x-aspect-square md:x-aspect-auto md:x-px-[18px] x-flex x-items-center x-justify-center md:x-justify-between x-transition-colors x-duration-150 x-rounded-md">
                <div class="x-flex x-gap-[18px] x-items-center">
                    <i class='x-text-[24px] md:x-text-[28px] lg:x-text-[28px] bx bxs-dashboard'></i>
                    <div class="x-text-[18px] x-hidden md:x-block x-text-[#4D4D4D]">
                        Dashboard
                    </div>
                </div>
                <div class="x-hidden md:x-flex chevron-wrapper x-items-center">
                    <i class='x-text-[28px] lg:x-text-[28px] bx bx-chevron-left'></i>
                </div>
            </button>


            <button
                class="orders nav-button x-flex-1 x-aspect-square md:x-aspect-auto md:x-px-[18px] x-flex x-items-center x-justify-center md:x-justify-between x-transition-colors x-duration-150 x-rounded-md">
                <div class="x-flex x-gap-[18px] x-items-center">
                    <i class='x-text-[24px] md:x-text-[28px] lg:x-text-[28px] bx bxs-shopping-bag'></i>
                    <div class="x-text-[18px] x-hidden md:x-block x-text-[#4D4D4D]">
                        Orders
                    </div>
                </div>
                <div class="x-hidden md:x-flex chevron-wrapper x-items-center">
                    <i class='x-text-[28px] lg:x-text-[28px] bx bx-chevron-left'></i>
                </div>
            </button>

            <button
                class="addresses nav-button x-flex-1 x-aspect-square md:x-aspect-auto md:x-px-[18px] x-flex x-items-center x-justify-center md:x-justify-between x-transition-colors x-duration-150 x-rounded-md">
                <div class="x-flex x-gap-[18px] x-items-center">
                    <i class='x-text-[24px] md:x-text-[28px] lg:x-text-[28px] bx bxs-map-pin'></i>
                    <div class="x-text-[18px] x-hidden md:x-block x-text-[#4D4D4D]">
                        Addresses
                    </div>
                </div>
                <div class="x-hidden md:x-flex chevron-wrapper x-items-center">
                    <i class='x-text-[28px] lg:x-text-[28px] bx bx-chevron-left'></i>
                </div>
            </button>

            <button
                class="account nav-button x-flex-1 x-aspect-square md:x-aspect-auto md:x-px-[18px] x-flex x-items-center x-justify-center md:x-justify-between x-transition-colors x-duration-150 x-rounded-md">
                <div class="x-flex x-gap-[18px] x-items-center">
                    <i class='x-text-[24px] md:x-text-[28 lg:x-text-[32px]px] bx bxs-user'></i>
                    <div class="x-text-[18px] x-hidden md:x-block x-text-[#4D4D4D]">
                        Account Details
                    </div>
                </div>
                <div class="x-hidden md:x-flex chevron-wrapper x-items-center">
                    <i class='x-text-[28px] lg:x-text-[28px] bx bx-chevron-left'></i>
                </div>
            </button>

            <button
                class="drafts nav-button x-flex-1 x-aspect-square md:x-aspect-auto md:x-px-[18px] x-flex x-items-center x-justify-center md:x-justify-between x-transition-colors x-duration-150 x-rounded-md">
                <div class="x-flex x-gap-[18px] x-items-center">
                    <i class='x-text-[24px] md:x-text-[28px] lg:x-text-[28px] bx bxs-folder-open'></i>
                    <div class="x-text-[18px] x-hidden md:x-block x-text-[#4D4D4D]">
                        Draft Orders
                    </div>
                </div>
                <div class="x-hidden md:x-flex chevron-wrapper x-items-center">
                    <i class='x-text-[28px] lg:x-text-[28px] bx bx-chevron-left'></i>
                </div>
                <div class="x-hidden x-underline-offset-[2px]">
                </div>
            </button>

            <button
                class="saved nav-button x-flex-1 x-aspect-square md:x-aspect-auto md:x-px-[18px] x-flex x-items-center x-justify-center md:x-justify-between x-transition-colors x-duration-150 x-rounded-md">
                <div class="x-flex x-gap-[18px] x-items-center">
                    <i class='x-text-[24px] md:x-text-[28p lg:x-text-[32px]x] bx bxs-package'></i>
                    <div class="x-text-[18px] x-hidden md:x-block x-text-[#4D4D4D]">
                        Requested Shipping
                    </div>
                </div>
                <div class="x-hidden md:x-flex chevron-wrapper x-items-center">
                    <i class='x-text-[28px] lg:x-text-[28px] bx bx-chevron-left'></i>
                </div>
            </button>
        </div>
    </div>
</section>

<style>
    .shadow-right {
        box-shadow: 5px 0 8px -2px rgba(0, 0, 0, 0.15);
    }

    .shadow-left {
        box-shadow: -5px 0 8px -2px rgba(0, 0, 0, 0.15);
    }

    .table-alternating-rows tbody tr:nth-child(even) {
        background-color: #F0EFEF;
    }

    .loading-spinner {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        margin-top: 20px;
    }
    .spinner {
        width: 30px;
        height: 30px;
        border: 4px solid #ddd;
        border-top: 4px solid #951828;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }
    @keyframes spin {
        from {
            transform: rotate(0deg);
        }
        to {
            transform: rotate(360deg);
        }
    }
    .size-guide-modal .tingle-modal-box__content {
        padding: 0;
    }

    .size-guide-modal .tingle-modal-box__footer {
        padding: 0 18px 32px;
        background-color: white;
    }

    .size-guide-modal .tingle-modal__close {
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: white;
        color: black;
        border-bottom: 1px solid #e5e5e5;
    }

    .size-guide-modal .tingle-modal__closeLabel {
        font-size: 22px;
    }


    .size-guide-modal .tingle-modal__closeIcon {
        width: 12px;
        position: absolute;
        left: 18px;
        margin: 0;
    }

    @media (min-width: 540px) {
        .tingle-modal__close {
            border-radius: 4px;
        }

        .tingle-modal__closeIcon {
            position: static !important;
        }
    }

    @media (min-width: 1280px) {
        .freq-modal .tingle-modal-box {
            width: 33%;
        }
    }

    .address-field {
    margin-bottom: 16px;
    display: flex;
    flex-direction: column;
    }

    .field-label {
        font-size: 14px;
        font-weight: 600;
        color: #333;
        margin-bottom: 8px;
    }

    .field-input {
        width: 100%;
        padding: 10px 12px;
        font-size: 14px;
        border: 1px solid #ccc;
        border-radius: 4px;
        background-color: #fff;
        appearance: none;
    }

    .select-box {
        position: relative;
        background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 4 5"%3E%3Cpath fill="%23ccc" d="M2 0L0 2h4z"/%3E%3C/svg%3E');
        background-repeat: no-repeat;
        background-position: right 10px center;
        background-size: 10px;
    }

    .select-box:focus {
        border-color: #951828;
        box-shadow: 0 0 4px rgba(149, 24, 40, 0.4);
    }

    .select-box:hover {
        border-color: #888;
    }

    .select-box::-ms-expand {
        display: none;
    }


</style>
<script>
    const customerId = "{{ customer.id }}";
    document.addEventListener('DOMContentLoaded', function () {
        const addresses = {{ customer.addresses | json }}; // Shopify Liquid data
        
        // Initialize views and modals
        initializeMainView();
        initializeOrdersView();
        initializeCollapses();
        populateDraftOrders();
        initializeOrderView();
        populateRequestShippingOrders();
        initializeAddAddressModal(); 
        loadShippingAddresses(addresses);
        initializeAddressModals(addresses);

        // Event listener for saving a new address
        const saveAddButton = document.getElementById('save-add-address');
        if (saveAddButton) {
            saveAddButton.addEventListener('click', async function (event) {
                event.preventDefault();
                try {
                    const form = document.getElementById('add-new-address-form');
                    if (!form) {
                        alert('Add Address form is missing.');
                        return;
                    }

                    const formData = new FormData(form);

                    const response = await fetch(form.action, {
                        method: 'POST',
                        body: formData,
                    });

                    if (response.ok) {
                        alert('Address added successfully!');
                        window.location.href = '/account?view=addresses';
                    } else {
                        const errorText = await response.text();
                        console.error('Add Address error:', errorText);
                        alert('Failed to add address.');
                    }
                } catch (error) {
                    console.error('Error adding address:', error);
                    alert('An error occurred while adding the address.');
                }
            });
        }
                // Event listener for saving an edited address
        const saveEditButton = document.getElementById('save-edit-address');
        if (saveEditButton) {
            saveEditButton.addEventListener('click', async function (event) {
                event.preventDefault();
                try {
                    const form = document.getElementById('edit-address-form');
                    const addressId = document.getElementById('edit-address-id')?.value;

                    if (!form) {
                        alert('Edit Address form is missing.');
                        return;
                    }
                    if (!addressId) {
                        alert('Address ID is missing.');
                        return;
                    }

                    const formData = new URLSearchParams(new FormData(form));
                    formData.append('_method', 'put'); // Add method override

                    const response = await fetch(`/account/addresses/${addressId}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                        body: formData,
                    });

                    if (response.ok) {
                        alert('Address updated successfully!');
                        window.location.reload();
                    } else {
                        const errorText = await response.text();
                        console.error('Edit Address error:', errorText);
                        alert('Failed to update address.');
                    }
                } catch (error) {
                    console.error('Error editing address:', error);
                    alert('An error occurred while editing the address.');
                }
            });
        }
    });

    function initializeOrderView() {
        const mainView = $('.orders .main');
        const orderView = $('.orders .order-view');
        const viewOrderButtons = $(".view-order-btn");
        const backToOrdersButton = $(".order-back-btn");

        viewOrderButtons.on('click', function () {
            // get data of order
            const orderId = $(this).data('order');

            // add order=orderId to the url
            const url = new URL(window.location.href);
            url.searchParams.set('order', orderId);
            window.history.pushState({}, '', url);

            mainView.addClass('x-hidden');
            orderView.removeClass('x-hidden');
        });

        backToOrdersButton.on('click', function () {
            // remove order from the url
            const url = new URL(window.location.href);
            url.searchParams.delete('order');
            window.history.pushState({}, '', url);

            mainView.removeClass('x-hidden');
            orderView.addClass('x-hidden');
        });
    }

    //REQUESTED SHIPPING TAB
    async function populateRequestShippingOrders() {
        const currentUserId = `gid://shopify/Customer/${customerId}`;
        const query = `{
            draftOrders {
                id
                name
                createdAt
                customerId
                lineItems {
                    title
                    quantity
                    variantTitle
                    variant {
                        price
                        metafields {
                            key
                            value
                        }
                    }
                }
                shippingAddress {
                    address1
                    city
                    province
                    country
                    zip
                }
            }
        }`;
        const draftOrdersList = document.querySelector(".saved-orders-list");

        // Add loading animation
        const loadingSpinner = document.createElement("div");
        loadingSpinner.className = "loading-spinner";
        loadingSpinner.innerHTML = `
            <div class="spinner">
            </div>
        `;
        draftOrdersList.innerHTML = ""; // Clear content
        draftOrdersList.appendChild(loadingSpinner);

        try {
            const data = await fetchData(query);

            if (data && data.data && data.data.draftOrders) {
                const orders = data.data.draftOrders.filter(order => order.customerId === currentUserId).reverse();

                const filteredOrders = [];
                for (const order of orders) {
                    const orderId = order.id.split('/').pop();

                    // Check if the order has the "ShipRequested" tag
                    const tagQuery = `
                        query {
                            getDraftOrderTags(draftOrderId: "${orderId}") {
                                tag
                            }
                        }
                    `;
                    const tagData = await fetchData(tagQuery);
                    const hasShipRequestedTag = tagData.data?.getDraftOrderTags?.some(tag => tag.tag === "ShipRequested");

                    if (!hasShipRequestedTag) {
                        continue;
                    }

                    // Check for the shipping fee
                    const shippingFee = await checkForShippingFee(orderId);


                    // Ensure shippingFee is a string and handle cases where it's null or undefined
                    const feeString = typeof shippingFee === "string" ? shippingFee : "$0";


                    // Remove the "$" and parse as a float
                    const numericShippingFee = parseFloat(feeString.replace("$", ""));


                    // Determine the shipping status based on the numeric value
                    const shippingStatus = numericShippingFee > 0 ? "Shipping Quote Applied" : "Shipping Quote Requested";


                    filteredOrders.push({ ...order, shippingStatus, numericShippingFee });
                }

                draftOrdersList.innerHTML = ""; // Clear loading spinner
                if (filteredOrders.length > 0) {
                    for (const order of filteredOrders) {
                        const orderId = order.id.split('/').pop();
                        const formattedDate = new Date(order.createdAt).toLocaleDateString();
                        const orderName = order.name || `Order #${orderId}`;
                        const totalPrice = order.lineItems.reduce((sum, item) => sum + (item.variant?.price || 0) * item.quantity, 0);                        const totalWithShipping = totalPrice + order.numericShippingFee;

                        const collapsableDiv = document.createElement("div");
                        collapsableDiv.classList.add("collapsable");

                        collapsableDiv.innerHTML = `
                            <input type="checkbox" class="x-hidden">
                            <button class="collapse-trigger x-flex x-flex-row x-justify-between x-p-[16px] x-w-full x-bg-[#404042]">
                                <div class="x-text-white">Order Name ${orderName} Order #${orderId} (${order.lineItems.length} items) - ${formattedDate} | ${order.shippingStatus}</div>
                                <div class="x-flex x-items-center x-justify-center x-w-[20px] x-h-[20px]">
                                    <div class="collapse-feedback x-h-[16px] x-w-[2px] x-bg-white x-absolute x-transition-all x-duration-500">
                                    &nbsp;
                                    </div>
                                    <div class="x-h-[2px] x-w-[16px] x-bg-white x-absolute">
                                    </div>
                                </div>
                            </button>
                            <div class="collapse-content x-transition-all x-duration-500 x-bg-white" style="height: 0px; overflow: hidden;">
                                <div class="x-p-[16px] x-flex x-flex-col x-gap-[24px]">
                                    <div class="x-flex x-justify-end x-gap-[12px]">
                                        <button class="x-p-[8px] delete-draft-order" data-id="${order.id}">
                                            Delete Order
                                        </button>
                                        <button class="x-p-[8px] x-px-[24px] x-text-white x-bg-[#951828] add-to-cart" data-id="${order.id}">
                                            Add All to Cart
                                        </button>
                                    </div>
                                    <div class="x-flex x-flex-col x-gap-[16px]">
                                        ${order.lineItems.map(item => {
                                            const metafields = item.variant?.metafields.reduce((fields, mf) => {
                                                fields[mf.key] = mf.value;
                                                return fields;
                                            }, {}) || {};
                                            return  `
                                            <div class="x-space-y-[14px]">
                                                <div class="x-text-[#951828] x-text-[24px]">${item.title}</div>
                                                <table class="x-w-full table-alternating-rows">
                                                    <thead>
                                                        <tr class="x-text-white x-bg-[#404042]">
                                                                <th class="x-text-start x-p-[8px] x-font-normal x-w-[15%]">Item Code</th>
                                                                <th class="x-p-[8px] x-font-normal x-w-[15%]">Description</th>
                                                                <th class="x-p-[8px] x-font-normal x-w-[15%]">Cut Size</th>
                                                                <th class="x-p-[8px] x-font-normal x-w-[15%]">Packing</th>
                                                                <th class="x-p-[8px] x-font-normal x-w-[15%]">Qty</th>
                                                                <th class="x-p-[8px] x-font-normal x-w-[15%]">Price</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody class="x-text-center">
                                                        <tr class="x-border-b-[1px] x-border-gray-400">
                                                                <td class="x-text-start x-p-[8px]">${item.variantTitle || "N/A"}</td>
                                                                <td class="x-p-[8px]">${metafields.description || "N/A"}</td>
                                                                <td class="x-p-[8px]">${metafields.cut_size || "N/A"}</td>
                                                                <td class="x-p-[8px]">${metafields.packing}</td>
                                                                <td class="x-p-[8px]">${item.quantity}</td>
                                                                <td class="x-p-[8px]">$${(item.variant?.price * item.quantity).toFixed(2) || "0.00"}</td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                        `;}).join("")}
                                    </div>
                                    ${
                                        order.numericShippingFee > 0
                                            ? `
                                            <div class="x-w-full x-flex x-justify-between x-p-[8px] x-text-[#951828] x-border-[#951828] x-border-[2px] x-bg-[#F5DFE2]">
                                                <div class="x-text-[16px]">Shipping:</div>
                                                <div class="x-text-[16px]">$${order.numericShippingFee.toFixed(2)}</div>
                                            </div>
                                            <div class="x-w-full x-flex x-justify-between x-p-[8px] x-text-[#951828] x-border-[#951828] x-border-[2px] x-bg-[#F5DFE2]">
                                                <div class="x-text-[16px]">Total + Shipping:</div>
                                                <div class="x-text-[16px]">$${totalWithShipping.toFixed(2)}</div>
                                            </div>
                                            <div class="x-w-full x-flex x-justify-end">
                                                <a href="/pages/checkout?draftOrderId=${orderId}" class="x-bg-[#951828] x-text-white x-p-[8px] x-px-[24px] x-text-[16px] checkout-draft-order" data-id="${order.id}">
                                                    Checkout
                                                </a>
                                            </div>
                                            `
                                            : `
                                            <div class="x-w-full x-flex x-justify-between x-p-[8px] x-text-[#951828] x-border-[#951828] x-border-[2px] x-bg-[#F5DFE2]">
                                                <div class="x-text-[16px]">Total:</div>
                                                <div class="x-text-[16px]">$${totalPrice.toFixed(2)}</div>
                                            </div>                                           
                                            `
                                    }
                                </div>
                            </div>
                        `;
                        draftOrdersList.appendChild(collapsableDiv);
                    }
                    initializeCollapses(draftOrdersList);
                } else {
                    draftOrdersList.innerHTML = "<p>No draft orders available.</p>";
                }
            } else {
                draftOrdersList.innerHTML = "<p>Failed to fetch draft orders.</p>";
            }
        } catch (error) {
            console.error("Error fetching draft orders:", error);
            draftOrdersList.innerHTML = "<p>An error occurred while fetching draft orders.</p>";
        }
    }

    async function checkForShippingFee(draftOrderId) {
        const query = `
            query {
                checkForShippingFee(draftOrderId: "${draftOrderId}")
            }
        `;

        try {
            const response = await fetch("https://f059-158-62-75-42.ngrok-free.app/graphql", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ query }),
            });

            const result = await response.json();


            // Return the raw shipping fee value
            return result.data?.checkForShippingFee || "$0";
        } catch (error) {
            console.error("Error checking for shipping fee:", error);
            throw new Error("Failed to check for shipping fee.");
        }
    }



    //DRAFT ORDERS TAB
    async function fetchData(query) {
        try {
            const response = await fetch("https://f059-158-62-75-42.ngrok-free.app/graphql", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ query: query }),
            });
            const data = await response.json();
            return data;
        } catch (error) {
            console.error("Error fetching data:", error);
        }
    }

    async function populateDraftOrders() {
        const currentUserId = `gid://shopify/Customer/${customerId}`;
        const query = `{
            draftOrders {
                id
                name
                createdAt
                customerId
                lineItems {
                    title
                    quantity
                    variantTitle
                    variant {
                        price
                        metafields {
                            key
                            value
                        }
                    }
                }
                shippingAddress {
                    address1
                    city
                    province
                    country
                    zip
                }
            }
        }`;
        const draftOrdersList = document.querySelector(".draft-orders-list");

        // Add loading animation
        const loadingSpinner = document.createElement("div");
        loadingSpinner.className = "loading-spinner";
        loadingSpinner.innerHTML = `<div class="spinner">
        </div>`;
        draftOrdersList.innerHTML = ""; // Clear content
        draftOrdersList.appendChild(loadingSpinner);

        try {
            const data = await fetchData(query);

            if (data && data.data && data.data.draftOrders) {
                const orders = data.data.draftOrders.filter(order => order.customerId === currentUserId).reverse();

                const filteredOrders = [];
                for (const order of orders) {
                    const orderId = order.id.split('/').pop();

                    // Check if the order has the "Placed" or "ShipRequested" tag
                    const tagQuery = `{
                        getDraftOrderTags(draftOrderId: "${orderId}") {
                            tag
                        }
                    }`;
                    const tagData = await fetchData(tagQuery);
                    const hasPlacedTag = tagData.data?.getDraftOrderTags?.some(tag => tag.tag === "Placed" || tag.tag === "ShipRequested");

                    if (hasPlacedTag) {
                        continue;
                    }

                    filteredOrders.push(order);
                }

                draftOrdersList.innerHTML = ""; // Clear loading spinner
                if (filteredOrders.length > 0) {
                    for (const order of filteredOrders) {
                        const orderId = order.id.split('/').pop();
                        const formattedDate = new Date(order.createdAt).toLocaleDateString();
                        const orderName = order.name || `Order #${orderId}`;
                        console.log(order);

                        const collapsableDiv = document.createElement("div");
                        collapsableDiv.classList.add("collapsable");

                        collapsableDiv.innerHTML = `
                            <input type="checkbox" class="x-hidden">
                            <button class="collapse-trigger x-flex x-flex-row x-justify-between x-p-[16px] x-w-full x-bg-[#404042]">
                                <div class="x-text-white">Order Name ${orderName} Order #${orderId} (${order.lineItems.length} items) - ${formattedDate}</div>
                                <div class="x-flex x-items-center x-justify-center x-w-[20px] x-h-[20px]">
                                    <div class="collapse-feedback x-h-[16px] x-w-[2px] x-bg-white x-absolute x-transition-all x-duration-500"></div>
                                    <div class="x-h-[2px] x-w-[16px] x-bg-white x-absolute"></div>
                                </div>
                            </button>
                            <div class="collapse-content x-transition-all x-duration-500 x-bg-white" style="height: 0px; overflow: hidden;">
                                <div class="x-p-[16px] x-flex x-flex-col x-gap-[24px]">
                                    <div class="x-flex x-justify-end x-gap-[12px]">
                                        <button class="x-p-[8px] delete-draft-order" data-id="${order.id}">Delete Order</button>
                                        <button class="x-p-[8px] x-px-[24px] x-text-white x-bg-[#951828] add-to-cart" data-id="${order.id}">Add All to Cart</button>
                                    </div>
                                    <div class="x-flex x-flex-col x-gap-[16px]">
                                        ${order.lineItems.map(item => {
                                            const metafields = item.variant?.metafields.reduce((fields, mf) => {
                                                fields[mf.key] = mf.value;
                                                return fields;
                                            }, {}) || {};
                                            return `
                                                <div class="x-space-y-[14px]">
                                                    <div class="x-text-[#951828] x-text-[24px]">${item.title}</div>
                                                    <table class="x-w-full table-alternating-rows">
                                                        <thead>
                                                            <tr class="x-text-white x-bg-[#404042]">
                                                                <th class="x-text-start x-p-[8px] x-font-normal x-w-[15%]">Item Code</th>
                                                                <th class="x-p-[8px] x-font-normal x-w-[15%]">Description</th>
                                                                <th class="x-p-[8px] x-font-normal x-w-[15%]">Cut Size</th>
                                                                <th class="x-p-[8px] x-font-normal x-w-[15%]">Packing</th>
                                                                <th class="x-p-[8px] x-font-normal x-w-[15%]">Qty</th>
                                                                <th class="x-p-[8px] x-font-normal x-w-[15%]">Price</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody class="x-text-center">
                                                            <tr class="x-border-b-[1px] x-border-gray-400">
                                                                <td class="x-text-start x-p-[8px]">${item.variantTitle || "N/A"}</td>
                                                                <td class="x-p-[8px]">${metafields.description || "N/A"}</td>
                                                                <td class="x-p-[8px]">${metafields.cut_size || "N/A"}</td>
                                                                <td class="x-p-[8px]">${metafields.packing}</td>
                                                                <td class="x-p-[8px]">${item.quantity}</td>
                                                                <td class="x-p-[8px]">$${(item.variant?.price * item.quantity).toFixed(2) || "0.00"}</td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            `;
                                        }).join("")}
                                    </div>
                                    <div class="x-w-full x-flex x-justify-between x-p-[8px] x-text-[#951828] x-border-[#951828] x-border-[2px] x-bg-[#F5DFE2]">
                                        <div class="x-text-[16px]">Total: </div>
                                        <div class="x-text-[16px]">$${order.lineItems.reduce((sum, item) => sum + (item.variant?.price || 0) * item.quantity, 0).toFixed(2)}</div>
                                    </div>
                                    <div class="x-w-full x-flex x-justify-end">
                                        <a href="/pages/checkout?draftOrderId=${orderId}" class="x-bg-[#951828] x-text-white x-p-[8px] x-px-[24px] x-text-[16px] checkout-draft-order" data-id="${order.id}">Checkout</a>
                                    </div>
                                </div>
                            </div>
                        `;
                        draftOrdersList.appendChild(collapsableDiv);
                    }
                    initializeCollapses(draftOrdersList);
                } else {
                    draftOrdersList.innerHTML = "<p>No draft orders available.</p>";
                }
            } else {
                draftOrdersList.innerHTML = "<p>Failed to fetch draft orders.</p>";
            }
        } catch (error) {
            console.error("Error fetching draft orders:", error);
            draftOrdersList.innerHTML = "<p>An error occurred while fetching draft orders.</p>";
        }
    }

    function initializeCollapses(targetContainer) {
        $(targetContainer).find('.collapse-trigger').off('click').on('click', function () {
            let collapseContent = $(this).closest('.collapsable').find('.collapse-content');
            let collapseCheckbox = $(this).closest('.collapsable').find('input[type="checkbox"]');
            let collapseFeedback = $(this).find('.collapse-feedback');

            // Reset all other collapses within the container
            $(targetContainer).find('.collapse-content').not(collapseContent).css({ 'height': '0px' });
            $(targetContainer).find('.collapsable input[type="checkbox"]').not(collapseCheckbox).prop('checked', false);
            $(targetContainer).find('.collapse-feedback').not(collapseFeedback).css({ transform: 'rotate(0deg)' });

            // Toggle current collapse
            if (collapseCheckbox.prop('checked')) {
                collapseContent.css({ 'height': '0px' });
                collapseCheckbox.prop('checked', false);
                collapseFeedback.css({ transform: 'rotate(0deg)' });
            } else {
                collapseContent.css({ 'height': `${collapseContent[0].scrollHeight}px` });
                collapseCheckbox.prop('checked', true);
                collapseFeedback.css({ transform: 'rotate(90deg)' });
            }
        });
    }


    // ADDRESSES TAB     
    //EDIT MODAL IS IN HERE
    function initializeAddressModals(addresses) {
        const editAddressModal = new tingle.modal({
            footer: true,
            stickyFooter: false,
            closeMethods: ['overlay', 'button', 'escape'],
            closeLabel: "Close",
            cssClass: ['edit-address-modal'],
        });

        editAddressModal.setContent(`
            <div class="x-flex x-flex-col x-gap-[16px]">
                <div class="x-text-[20px] x-font-semibold">Edit Address</div>
                <form id="edit-address-form" class="x-space-y-[8px]">
                    <input type="hidden" id="edit-address-id">
                    <input type="text" name="address[first_name]" id="edit-first-name" class="x-border x-w-full x-p-[8px]" placeholder="First Name" required>
                    <input type="text" name="address[last_name]" id="edit-last-name" class="x-border x-w-full x-p-[8px]" placeholder="Last Name" required>
                    <input type="text" name="address[company]" id="edit-company" class="x-border x-w-full x-p-[8px]" placeholder="Company (Optional)">
                    <input type="text" name="address[address1]" id="edit-address1" class="x-border x-w-full x-p-[8px]" placeholder="Address Line 1" required>
                    <input type="text" name="address[city]" id="edit-city" class="x-border x-w-full x-p-[8px]" placeholder="City" required>
                    <select id="AddressCountry_edit-address" name="address[country]" data-address-country-select autocomplete="country">
                        {{ all_country_option_tags }}
                    </select>
                    <select id="AddressProvince_edit-address" name="address[province]" autocomplete="address-level1" style="display: none;">
                    </select>
                    <input type="text" name="address[zip]" id="edit-zip" class="x-border x-w-full x-p-[8px]" placeholder="Zip Code" required>
                </form>
            </div>
        `);

        // Function to populate provinces based on the selected country
        function populateProvinces(countrySelect, provinceSelect, provinceValue = '') {
            const selectedOption = Array.from(countrySelect.options).find(
                option => option.value === countrySelect.value
            );

            if (selectedOption) {
                const provinces = JSON.parse(selectedOption.getAttribute('data-provinces') || '[]');

                // Clear existing province options
                provinceSelect.innerHTML = '';

                if (provinces.length > 0) {
                    provinceSelect.style.display = 'block';

                    provinces.forEach((province, index) => {
                        const option = document.createElement('option');
                        option.value = province[0];
                        option.textContent = province[1];
                        provinceSelect.appendChild(option);
                    });

                    // Preselect the province
                    if (provinceValue) {
                        provinceSelect.value = provinceValue;
                    } else {
                        // Automatically select the first province if none is preselected
                        provinceSelect.value = provinces[0][0];
                    }
                } else {
                    provinceSelect.style.display = 'none';
                }
            }
        }


        document.querySelectorAll('.edit-address').forEach((btn) => {
            btn.addEventListener('click', (e) => {
                const addressId = parseInt(e.target.dataset.id, 10);
                const address = addresses.find((addr) => addr.id === addressId);

                if (address) {
                    console.log('Editing Address: ', address); // Debugging
                    document.getElementById('edit-first-name').value = address.first_name || '';
                    document.getElementById('edit-last-name').value = address.last_name || '';
                    document.getElementById('edit-company').value = address.company || '';
                    document.getElementById('edit-address1').value = address.address1 || '';
                    document.getElementById('edit-city').value = address.city || '';
                    document.getElementById('edit-zip').value = address.zip || '';
                    document.getElementById('edit-address-id').value = address.id;

                    const countrySelect = document.getElementById('AddressCountry_edit-address');
                    const provinceSelect = document.getElementById('AddressProvince_edit-address');

                    // Set country and populate provinces
                    if (countrySelect && provinceSelect) {
                        countrySelect.value = address.country || '';
                        populateProvinces(countrySelect, provinceSelect, address.province);
                    }

                    // Attach event listener for country change
                    countrySelect.addEventListener('change', () => {
                        populateProvinces(countrySelect, provinceSelect);
                    });

                    // Open the modal after populating all fields
                    editAddressModal.open();
                } else {
                    console.error(`Address with ID ${addressId} not found`);
                }
            });
        });

        editAddressModal.addFooterBtn('Save', 'tingle-btn tingle-btn--primary', async function () {
            const form = document.getElementById('edit-address-form');
            const addressId = document.getElementById('edit-address-id')?.value;

            if (!form) {
                alert('Edit Address form is missing.');
                return;
            }
            if (!addressId) {
                alert('Address ID is missing.');
                return;
            }

            try {
                const formData = new URLSearchParams(new FormData(form));
                formData.append('_method', 'put');

                const response = await fetch(`/account/addresses/${addressId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: formData,
                });

                if (response.ok) {
                    alert('Address updated successfully!');
                    window.location.reload();
                } else {
                    const errorText = await response.text();
                    console.error('Edit Address error:', errorText);
                    alert('Failed to update address.');
                }
            } catch (error) {
                console.error('Error updating address:', error);
                alert('An error occurred while updating the address.');
            }
        });

        editAddressModal.addFooterBtn('Cancel', 'tingle-btn tingle-btn--secondary', function () {
            editAddressModal.close();
        });
    }
    //ADD MODAL IS IN HERE
    function initializeAddAddressModal() {
        const addAddressModal = new tingle.modal({
            footer: true,
            stickyFooter: false,
            closeMethods: ['overlay', 'button', 'escape'],
            closeLabel: "Close",
            cssClass: ['add-address-modal'],
        });

        addAddressModal.setContent(`
            <div class="x-flex x-flex-col x-gap-[16px]">
                <div class="x-text-[20px] x-font-semibold">Add New Address</div>
                <form id="add-new-address-form" class="x-space-y-[8px]" method="post" action="/account/addresses">
                    <input type="text" name="address[first_name]" id="add-first-name" class="x-border x-w-full x-p-[8px]" placeholder="First Name" required>
                    <input type="text" name="address[last_name]" id="add-last-name" class="x-border x-w-full x-p-[8px]" placeholder="Last Name" required>
                    <input type="text" name="address[company]" id="add-company" class="x-border x-w-full x-p-[8px]" placeholder="Company (Optional)">
                    <input type="text" name="address[address1]" id="add-address1" class="x-border x-w-full x-p-[8px]" placeholder="Address Line 1" required>
                    <input type="text" name="address[city]" id="add-city" class="x-border x-w-full x-p-[8px]" placeholder="City" required>

                    <!-- Country and Province Fields -->
                    <div class="address-field">
                        <label for="AddressCountry_add-new-address" class="field-label">Country/Region</label>
                        <select
                            id="AddressCountry_add-new-address"
                            name="address[country]"
                            data-address-country-select
                            data-default=""
                            data-form-id="add-new-address"
                            autocomplete="country"
                            class="field-input select-box"
                        >
                            {{ all_country_option_tags }}
                        </select>
                    </div>

                    <div id="AddressProvinceContainer_add-new-address" class="address-field" style="display: none;">
                        <label for="AddressProvince_add-new-address" class="field-label">Province</label>
                        <select
                            id="AddressProvince_add-new-address"
                            name="address[province]"
                            data-default=""
                            autocomplete="address-level1"
                            class="field-input select-box"
                        ></select>
                    </div>
                    <input type="text" name="address[zip]" id="add-zip" class="x-border x-w-full x-p-[8px]" placeholder="Zip Code" required>
                </form>
            </div>
        `);

        addAddressModal.addFooterBtn('Save', 'tingle-btn tingle-btn--primary', async function () {
            const form = document.getElementById('add-new-address-form');
            const saveAddButton = this;

            if (form) {
                try {
                    const formData = new FormData(form);

                    // Create a loading spinner
                    const loadingSpinner = document.createElement("div");
                    loadingSpinner.className = "loading-spinner";
                    loadingSpinner.innerHTML = `
                        <div class="spinner">
                            <style>
                                .spinner {
                                    border: 4px solid #f3f3f3;
                                    border-top: 4px solid #3498db;
                                    border-radius: 50%;
                                    width: 20px;
                                    height: 20px;
                                    animation: spin 1s linear infinite;
                                    margin: 0 auto;
                                }
                                @keyframes spin {
                                    0% { transform: rotate(0deg); }
                                    100% { transform: rotate(360deg); }
                                }
                            </style>
                        </div>
                    `;

                    // Replace button content with the spinner
                    saveAddButton.innerHTML = "";
                    saveAddButton.appendChild(loadingSpinner);

                    // Use the form action or default to `/account?view=addresses`
                    const formAction = form.action || '/account?view=addresses';

                    const response = await fetch(formAction, {
                        method: 'POST',
                        body: formData,
                    });

                    if (response.ok) {
                        alert('Address added successfully!');
                        window.location.href = '/account?view=addresses'; // Redirect to desired URL
                    } else {
                        const errorMessage = await response.text(); // Capture and log the error response
                        console.error('Failed to add address:', errorMessage);
                        alert('Failed to add address. Please try again.');
                    }
                } catch (error) {
                    console.error('Error adding address:', error);
                    alert('An unexpected error occurred.');
                } finally {
                    // Restore original button content after loading
                    saveAddButton.innerHTML = "Save";
                }
            } else {
                alert('Form not found.');
            }
        });



        addAddressModal.addFooterBtn('Cancel', 'tingle-btn tingle-btn--secondary', function () {
            addAddressModal.close();
        });

        document.getElementById('add-new-address').addEventListener('click', () => {
            addAddressModal.open();

            // Initialize country and province logic
            const countrySelect = document.getElementById('AddressCountry_add-new-address');
            const provinceSelect = document.getElementById('AddressProvince_add-new-address');
            const provinceContainer = document.getElementById('AddressProvinceContainer_add-new-address');

            if (countrySelect && provinceSelect) {
                countrySelect.addEventListener('change', () => {
                    const selectedOption = countrySelect.options[countrySelect.selectedIndex];
                    const provinces = JSON.parse(selectedOption.getAttribute('data-provinces') || '[]');

                    // Clear and populate province options
                    provinceSelect.innerHTML = '';
                    if (provinces.length > 0) {
                        provinceContainer.style.display = 'block';
                        provinces.forEach(province => {
                            const option = document.createElement('option');
                            option.value = province[0];
                            option.textContent = province[1];
                            provinceSelect.appendChild(option);
                        });
                    } else {
                        provinceContainer.style.display = 'none';
                    }
                });

                // Trigger change event on modal open to ensure proper initialization
                countrySelect.dispatchEvent(new Event('change'));
            }
        });
    }
    // ONLOAD ADDRESS IS IN HERE
    function loadShippingAddresses(addresses) {
        const addressContainer = document.getElementById('shipping-addresses');
        addressContainer.innerHTML = '';

        console.log("Addresses Array: ", addresses); // Debugging

        if (addresses.length === 0) {
            addressContainer.innerHTML = '<div>No addresses found. Please add a new address.</div>';
            return;
        }

        addresses.forEach((address) => {
            const addressHTML = `
                <div class="x-space-y-[8px]">
                    <div class="x-border x-p-[16px]">
                        <div>${address.first_name || ''} ${address.last_name || ''}</div>
                        <div>${address.company || ''}</div>
                        <div>${address.address1 || ''}</div>
                        <div>${address.city || ''}, ${address.province || ''} ${address.zip || ''}</div>
                        <div>${address.country || ''}</div>
                    </div>
                    <div class="x-flex x-flex-row x-gap-[8px]">
                        <button class="x-flex-1 x-border x-p-[8px] x-bg-[#0b0f9e] x-text-white x-rounded-md edit-address" data-id="${address.id}">Edit</button>
                        <button class="x-flex-1 x-border x-p-[8px] x-bg-[#9e0b0f] x-text-white x-rounded-md delete-address" data-id="${address.id}">Delete</button>
                    </div>
                </div>
            `;
            addressContainer.insertAdjacentHTML('beforeend', addressHTML);
        });

        // Attach event listener to .delete-address buttons
        const deleteButtons = document.querySelectorAll('.delete-address');
        deleteButtons.forEach((button) => {
            button.addEventListener('click', function () {
                const addressId = this.getAttribute('data-id');
                deleteAddress(addressId);
            });
        });
    }

    async function deleteAddress(addressId) {
        if (!confirm('Are you sure you want to delete this address?')) return;

        try {
            const response = await fetch(`/account/addresses/${addressId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: new URLSearchParams({ _method: 'delete' }),
            });

            if (response.ok) {
                alert('Address deleted successfully!');
                window.location.reload();
            } else {
                alert('Failed to delete address.');
            }
        } catch (error) {
            console.error('Error deleting address:', error);
        }
    }




    // ORDERS TAB                
    function initializeOrdersView() {
        const urlParams = new URLSearchParams(window.location.search);
        const initialView = urlParams.get('sub-view') || 'company-orders';
        updateSubView(initialView);

        $('.sub-view-button').click(function () {
            const view = $(this).attr('class').split(' ')[0];
            updateSubView(view);
        });
    }

    function clearSubViewButtonStyles() {
        $('.sub-view-button').removeClass('x-underline');
    }

    function updateSubView(view) {
        clearSubViewButtonStyles();
        $(`.${view}.sub-view-button`).addClass('x-underline x-underline-offset-[8px] x-decoration-[#9E0B0F]');
        $('.sub-view').addClass('x-hidden');
        $(`.${view}.sub-view`).removeClass('x-hidden');
    }

    function initializeMainView() {
        const urlParams = new URLSearchParams(window.location.search);
        const views = ['dashboard', 'orders', 'addresses', 'account', 'saved', 'drafts'];
        const initialView = views.includes(urlParams.get('view')) ? urlParams.get('view') : 'dashboard';
        updateMainView(initialView);

        $('.nav-button').click(function () {
            const view = $(this).attr('class').split(' ')[0];
            updateMainView(view);
        });
    }

    function clearButtonStyles() {
        $('.nav-button').css({ 'background-color': '#F0EFEF', 'color': '#4D4D4D' });
        $('.chevron-wrapper').html('<i class="x-text-[32px] bx bx-chevron-right"></i>');
    }

    function updateMainView(view) {
        clearButtonStyles();
        $(`.${view}.nav-button`).css({ 'background-color': '#F5DFE2', 'color': '#951828' })
            .find('.chevron-wrapper').html('<i class="x-text-[32px] bx bx-chevron-left"></i>');
        $('.view').addClass('x-hidden');
        $(`.${view}.view`).removeClass('x-hidden');
        window.history.pushState({}, '', `?view=${view}`);
    }
</script>

