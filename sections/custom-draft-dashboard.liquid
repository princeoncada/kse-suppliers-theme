<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<section>
    <div class="x-max-w-[1440px] x-mx-auto">
        <div class="x-p-[16px] md:x-p-[50px]">
            <h1 class="x-text-[24px] md:x-text-[32px] x-mb-[8px] md:x-mb-[16px]">
                Draft Orders
            </h1>
            <div class="dashboard">
                <div class="x-border-t-[1px] x-pt-[12px]">
                    <div class="md:x-text-[18px]">
                        No draft orders found.
                    </div>
                </div>
                <div class="x-flex-col x-gap-[16px] md:x-text-[18px]" style="display: none;">
                    <div class="x-flex x-flex-col x-gap-[8px]">
                        <div class="x-w-full">
                            <select id="order-type-dropdown"
                                class="x-w-full x-h-full x-p-[8px] md:x-p-[16px] x-border x-outline-none x-shadow-none">
                                <option value="">Loading...</option>
                            </select>
                        </div>
                        <div class="shipping-address-container x-w-full x-flex x-flex-col x-gap-[8px]">
                            <select id="shipping-address-dropdown"
                                class="x-w-full x-h-full x-p-[8px] md:x-p-[16px] x-border x-outline-none x-shadow-none">
                                <option value="">Loading...</option>
                            </select>
                            <div class="default-address-container x-border x-p-[8px] md:x-p-[16px]" style="display: none;">
                                i am a default container
                            </div>
                        </div>
                    </div>
                    <div>
                        <div class="">
                            <div class="x-flex x-flex-row x-mb-[-1px]">
                                <div
                                    class="x-w-4/5 x-border x-p-[8px] md:x-p-[16px] x-flex x-flex-col x-gap-[8px] md:x-gap-[16px]">
                                    <div>
                                        <div>Draft Items</div>
                                    </div>
                                </div>
                                <div class="x-w-1/5 x-text-center x-flex x-flex-col x-border x-border-l-0">
                                    <div class="x-p-[8px] md:x-p-[16px]">Subtotal</div>
                                </div>
                            </div>
                        </div>
                        <div class="order-items x-pt-[1px]">
                            <!-- Order items will be displayed here -->
                        </div>
                    </div>
                    <div class="x-grid x-grid-cols-[80%_20%]">
                        <div class="buttons x-flex x-flex-col">
                            <button
                                class="request-shipping x-flex-1 x-border x-py-[16px] hover:x-bg-black hover:x-text-white hover:x-border-black x-transition-colors x-duration-300 x-ease-in-out">Request
                                Shipping Quote</button>
                            <button
                                class="place-order x-flex-1 x-border x-border-t-0 x-py-[16px] hover:x-bg-black hover:x-text-white hover:x-border-black x-transition-colors x-duration-300 x-ease-in-out">Place
                                Order</button>
                        </div>
                        <div class="x-text-center x-flex x-flex-col x-border x-border-l-0">
                            <div class="x-border-b-[1px] x-p-[8px] md:x-p-[16px]">Total</div>
                            <div class="x-p-[8px] x-flex x-flex-col x-items-center x-justify-center x-h-full">
                                <div>
                                    <div id="order-total">$0.00</div>
                                    <div id="shipping-cost" class="x-hidden">$0.00 / Shipping</div>
                                </div>
                                <div id="total-divider"
                                    class="x-w-full md:x-w-[80%] x-h-[1px] x-border-b-[1px] x-border-0 x-my-[8px] x-hidden">
                                    &nbsp;
                                </div>
                                <div id="grand-total" class="x-hidden">$0.00 / Grand</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
    const customerId = "{{ customer.id }}";

    $(document).ready(() => {
        populateOrderTypeDropdown();
        populateShippingAddressDropdown();
        $("#order-type-dropdown").change(async () => {
            updateContentBox();
            checkAndDisableShippingButton();
        });
    });

    $(".request-shipping").click(() => {
        const draftOrderId = getSelectedDraftOrderId();
        const userId = "{{ customer.id }}";
        const selectedAddress = JSON.parse($("#shipping-address-dropdown").val() || '{}');

        if (!isShippingRequested(draftOrderId)) {
            requestShipping(draftOrderId, userId, selectedAddress);
            setShippingRequested(draftOrderId);
            disableShippingButton();
        } else {
            alert("Shipping fee request has already been made for this order.");
        }
    });

    $(".place-order").click(async function () {
        $(".place-order").prop("disabled", true).text("Placing Order...");
        const draftOrderId = getSelectedDraftOrderId();
        await completeDraftOrder(draftOrderId);
    });



    async function updateCompleteOrderButton(draftOrderId) {
        const isCompleted = await checkDraftOrderStatus(draftOrderId);
        const completeOrderButton = $(".place-order");

        if (isCompleted) {
            completeOrderButton.prop("disabled", true).text("Order Completed").removeClass("x-bg-white x-text-black").addClass("x-bg-gray-500 x-text-white");
        } else {
            completeOrderButton.prop("disabled", false).text("Place Order").removeClass("x-bg-gray-500 x-text-white").addClass("x-bg-white x-text-black");
        }
    }

    async function completeDraftOrder(draftOrderId) {
        // Get the selected shipping address details from the dropdown
        const selectedAddress = JSON.parse($("#shipping-address-dropdown").val() || '{}');

        const completeMutation = `
            mutation {
                completeDraftOrder(id: "${draftOrderId}", shippingAddress: {
                    address1: "${selectedAddress.addressText.split(',')[0] || ''}",
                    city: "${selectedAddress.addressText.split(',')[1] || ''}",
                    province: "${selectedAddress.province || ''}",
                    country: "${selectedAddress.country || ''}",
                    zip: "${selectedAddress.zip || ''}"
                })
            }
        `;

        const tagMutation = `
            mutation {
                createDraftOrderTag(draftOrderId: "${draftOrderId}", tag: "Placed")
            }
        `;

        try {
            const tagResponse = await fetch("https://eaa0-120-72-18-186.ngrok-free.app/graphql", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ query: tagMutation }),
            });

            const tagResult = await tagResponse.json();
            if (tagResult.data?.createDraftOrderTag) {
                console.log("Order tagged as Placed.");
            } else {
                console.warn("Failed to tag the draft order as Placed.");
                return; 
            }

            const response = await fetch("https://eaa0-120-72-18-186.ngrok-free.app/graphql", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ query: completeMutation }),
            });

            const result = await response.json();

            if (result.data?.completeDraftOrder) {
                alert("Order completed successfully.");
                $(".place-order").text("Order Completed");
                window.location.reload();
            }
            else {
                alert("Failed to complete the order.");
            }
        } catch (error) {
            console.error("Error completing draft order:", error);
            alert("An error occurred while completing the order.");
        }
    }

    function checkAndDisableShippingButton() {
        const draftOrderId = getSelectedDraftOrderId();
        if (isShippingRequested(draftOrderId)) {
            disableShippingButton();
        }
    }

    async function requestShipping(draftOrderId, userId, selectedAddress) {
        const mutation = `
            mutation {
                requestShippingFee(
                    userId: "${userId}",
                    draftOrderId: "${draftOrderId}",
                    shippingAddress: {
                        address1: "${selectedAddress.addressText.split(',')[0] || ''}",
                        city: "${selectedAddress.addressText.split(',')[1] || ''}",
                        province: "${selectedAddress.province || ''}",
                        country: "${selectedAddress.country || ''}",
                        zip: "${selectedAddress.zip || ''}"
                    }
                )
            }
        `;

        try {
            const response = await fetch("https://eaa0-120-72-18-186.ngrok-free.app/graphql", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ query: mutation }),
            });

            const result = await response.json();

            if (result.data?.requestShippingFee) {
                alert("Shipping request email sent successfully.");
            } else {
                alert("Failed to send shipping request email.");
            }
        } catch (error) {
            console.error("Error sending shipping request:", error);
        }
    }

    async function checkDraftOrderStatus(draftOrderId) {
        const query = `
            query {
                isDraftOrderCompleted(id: "${draftOrderId}")
            }
        `;

        try {
            const response = await fetch("https://eaa0-120-72-18-186.ngrok-free.app/graphql", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ query }),
            });
            const result = await response.json();
            return result.data.isDraftOrderCompleted;
        } catch (error) {
            console.error("Error checking draft order status:", error);
        }
    }
    
    function getSelectedDraftOrderId() {
        const selectedOrder = JSON.parse($("#order-type-dropdown").val() || '{}');
        return selectedOrder?.id?.split('/').pop();
    }

    function setCookie(name, value, days) {
        const date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        document.cookie = `${name}=${value}; expires=${date.toUTCString()}; path=/`;
    }

    function getCookie(name) {
        const nameEQ = `${name}=`;
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            let cookie = cookies[i].trim();
            if (cookie.indexOf(nameEQ) === 0) {
                return cookie.substring(nameEQ.length, cookie.length);
            }
        }
        return null;
    }

    function isShippingRequested(draftOrderId) {
        return getCookie(`shippingRequested_${draftOrderId}`) === "1";
    }

    function setShippingRequested(draftOrderId) {
        setCookie(`shippingRequested_${draftOrderId}`, "1", 3); // Cookie expires in 3 days
    }

    function disableShippingButton() {
        $(".request-shipping").prop("disabled", true).text("Shipping Fee Requested")
            .removeClass("x-bg-white x-text-black")
            .addClass("x-bg-black x-text-white");
    }

    async function fetchData(query) {
        try {
            const response = await fetch("https://eaa0-120-72-18-186.ngrok-free.app/graphql", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ query: query }),
            });
            const data = await response.json();
            return data;
        } catch (error) {
            console.error("Error fetching data:", error);
        }
    }

    async function populateOrderTypeDropdown() {
        const currentUserId = `gid://shopify/Customer/${customerId}`;
        const query = `query { draftOrders { id createdAt customerId lineItems { title quantity price variant_title } metafields { id namespace key value } shippingAddress { address1 city province country zip } } }`;
        const dropdown = $("#order-type-dropdown");
        dropdown.empty(); // Clear existing options

        const data = await fetchData(query);

        if (data && data.data && data.data.draftOrders) {
            const orders = data.data.draftOrders.filter(order => order.customerId === currentUserId).reverse();

            for (const order of orders) {
                const orderId = order.id.split('/').pop(); // Extract numeric ID

                // Check if the draft order has the "Placed" tag
                const tagQuery = `query { getDraftOrderTags(draftOrderId: "${orderId}"){tag}}`;
                const tagData = await fetchData(tagQuery);
                const hasPlacedTag = tagData.data?.getDraftOrderTags?.some(tag => tag.tag === "Placed");

                // Skip this order if it has the "Placed" tag
                if (hasPlacedTag) continue;

                // Format createdAt date and add to dropdown only if it doesn’t have the "Placed" tag
                const formattedDate = new Date(order.createdAt).toLocaleDateString();
                const option = $("<option>").val(JSON.stringify(order)).text(`Order ID: ${orderId} - Date: ${formattedDate}`);
                dropdown.append(option);
            }

            if (dropdown.children().length > 0) {
                dropdown.val(dropdown.children().first().val());

                $(".dashboard > div:first-child").css("display", "none");
                $(".dashboard > div:last-child").css("display", "flex");
                updateContentBox();
            } else {
                $(".dashboard > div:last-child").css("display", "none");
                $(".dashboard > div:first-child").css("display", "flex");
            }
        }
    }
    
    async function populateShippingAddressDropdown() {
        const currentUserId = `gid://shopify/Customer/${customerId}`;
        const query = `{user(id: "${currentUserId}") {id firstName lastName addresses {address1 address2 city province country zip}}}`;
        const dropdown = $("#shipping-address-dropdown");
        const data = await fetchData(query);
        dropdown.empty();

        if (data && data.data && data.data.user) {
            const user = data.data.user;
            $.each(user.addresses, (index, address) => {
                const addressText = `${address.address1}, ${address.city}`;
                const option = $("<option>").val(JSON.stringify({
                    userId: user.id,
                    addressText,
                    province: address.province,
                    country: address.country,
                    zip: address.zip
                })).text(`${user.firstName} ${user.lastName} - ${addressText}`);
                dropdown.append(option);
            });
        } else {
            dropdown.html("<option value=''>No addresses found</option>");
        }
    }

    async function checkForShippingFee(draftOrderId) {
        const query = `query { checkForShippingFee(draftOrderId: "${draftOrderId}") }`;

        try {
            const response = await fetch("https://eaa0-120-72-18-186.ngrok-free.app/graphql", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ query }),
            });
            const result = await response.json();
            return result.data.checkForShippingFee;
        } catch (error) {
            console.error("Error checking for shipping fee:", error);
        }
    }

    async function updateContentBox() {
        const selectedOrder = JSON.parse($("#order-type-dropdown").val() || '{}');
        const draftOrderId = selectedOrder.id ? selectedOrder.id.split('/').pop() : null;

        const newOrderItems = $(".order-items");
        newOrderItems.empty();

        const orderItems = $("#order-items");
        orderItems.empty();

        let total = 0;

        let shippingCost = 0;
        if (selectedOrder.id) {
            const draftOrderId = selectedOrder.id.split('/').pop();
            shippingCost = await checkForShippingFee(draftOrderId);

            if (shippingCost !== null && shippingCost !== undefined) {
                shippingCost = parseFloat(shippingCost.toString().replace(/[^0-9.]/g, '')) || 0;
            } else {
                shippingCost = 0;
            }
        }


        if (selectedOrder.lineItems && selectedOrder.lineItems.length > 0) {
            $.each(selectedOrder.lineItems, (index, item) => {
                const pricePerItem = parseFloat(item.price || 0);
                const subtotal = pricePerItem * item.quantity;
                total += subtotal;

                const orderItem = `
                    <div class="x-flex x-flex-row x-mt-[-1px]">
                        <div
                            class="x-w-4/5 x-border x-p-[8px] md:x-p-[16px] x-flex x-flex-col x-gap-[8px] md:x-gap-[16px]">
                            <div>
                                <div>Product: <span>${item.title}</span></div>
                                <div>Variant: <span>${item.variant_title}</span></div>
                            </div>
                            <div>
                                <div>Price: <span>$${pricePerItem.toFixed(2)}</span></div>
                                <div>Quantity: <span>${item.quantity}</span></div>
                            </div>
                        </div>
                        <div class="x-w-1/5 x-text-center x-flex x-flex-col x-border x-border-l-0">
                            <div class="x-flex-1 x-flex x-items-center x-justify-center x-p-[8px] md:x-p-[16px]">$${subtotal.toFixed(2)}
                            </div>
                        </div>
                    </div>
                `;

                newOrderItems.append(orderItem);

            });

            $("#order-total").text(`$${total.toFixed(2)}`);

            if (shippingCost > 0) {
            // If shipping is already included, fetch the shipping address and lock the dropdown
            const draftOrderData = await fetchDraftOrderById(draftOrderId);
            console.log("Draft order data:", draftOrderData);

                $("#shipping-cost").text(`$${shippingCost.toFixed(2)} - Shipping`);
                $("#shipping-cost").removeClass("x-hidden");

                $("#total-divider").removeClass("x-hidden");

                const grandTotal = total + shippingCost;
                $("#grand-total").text(`$${grandTotal.toFixed(2)}`);
                $("#grand-total").removeClass("x-hidden");

                
                $(".request-shipping")
                    .prop("disabled", true)
                    .text("Shipping Included")
                    .removeClass("x-bg-white hover:x-bg-black hover:x-text-white hover:x-border-black")
                    .addClass("x-bg-gray-200");
                $("#shipping-address-dropdown").css("display", "none");
                $(".default-address-container").text("Ship to address: " + draftOrderData?.data?.getDraftOrder?.shippingAddress?.address1 + ", " + draftOrderData?.data?.getDraftOrder?.shippingAddress?.city + ", " + draftOrderData?.data?.getDraftOrder?.shippingAddress?.province + ", " + draftOrderData?.data?.getDraftOrder?.shippingAddress?.country + ", " + draftOrderData?.data?.getDraftOrder?.shippingAddress?.zip);
                $(".default-address-container").css("display", "block");
            } else {
                $("#shipping-cost").addClass("x-hidden");
                $("#total-divider").addClass("x-hidden");
                $("#grand-total").addClass("x-hidden");
                
                // Check if shipping was already requested
                const draftOrderId = getSelectedDraftOrderId();
                if (isShippingRequested(draftOrderId)) {
                    $(".request-shipping")
                        .prop("disabled", true)
                        .text("Shipping Fee Requested")
                        .removeClass("x-bg-white")
                        .addClass("x-bg-black x-text-white");
                } else {
                    $(".request-shipping")
                        .prop("disabled", false)
                        .text("Request Shipping Quote")
                        .removeClass("x-bg-black x-text-white")
                        .addClass("x-bg-white hover:x-bg-black hover:x-text-white hover:x-border-black");
                }
                $("#shipping-address-dropdown").css("display", "block");
                $(".default-address-container").css("display", "none");
            }

        } else {
            console.warn("No line items found in the selected order.");
            orderItems.html("<tr><td colspan='5' class='x-text-center x-py-4'>No items to display.</td></tr>");
            $("#order-total").text("$0.00");
            $("#shipping-cost-row").hide();
            $("#grand-total").text("$0.00");
        }
    }

// Helper function to fetch draft order by ID
    async function fetchDraftOrderById(draftOrderId) {
        const query = `
            query($id: String!) {
                getDraftOrder(id: $id) {
                    id
                    shippingAddress {
                        address1
                        city
                        province
                        country
                        zip
                    }
                }
            }
        `;
        const response = await fetch("https://eaa0-120-72-18-186.ngrok-free.app/graphql", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ query, variables: { id: draftOrderId } })
        });
        return response.json();
    }
</script>